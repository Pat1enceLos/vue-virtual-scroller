{"version":3,"file":"vue-virtual-scroller.esm.js","sources":["../src/config.js","../src/components/common.js","../src/utils.js","../src/components/RecycleScroller.vue","../src/components/RecycleScroller.vue?vue&type=template&id=093a936d&lang.js","../src/components/DynamicScroller.vue","../src/components/DynamicScroller.vue?vue&type=template&id=76e15f19&lang.js","../src/components/DynamicScrollerItem.vue","../src/mixins/IdState.js","../src/index.js"],"sourcesContent":["export default {\n  itemsLimit: 1000,\n}\n","export const props = {\n  items: {\n    type: Array,\n    required: true,\n  },\n\n  keyField: {\n    type: String,\n    default: 'id',\n  },\n\n  direction: {\n    type: String,\n    default: 'vertical',\n    validator: (value) => ['vertical', 'horizontal'].includes(value),\n  },\n}\n\nexport function simpleArray () {\n  return this.items.length && typeof this.items[0] !== 'object'\n}\n","export let supportsPassive = false\n\nif (typeof window !== 'undefined') {\n  supportsPassive = false\n  try {\n    var opts = Object.defineProperty({}, 'passive', {\n      get () {\n        supportsPassive = true\n      },\n    })\n    window.addEventListener('test', null, opts)\n  } catch (e) {}\n}\n","<template>\n  <div\n    v-observe-visibility=\"handleVisibilityChange\"\n    class=\"vue-recycle-scroller\"\n    :class=\"{\n      ready,\n      'page-mode': pageMode,\n      [`direction-${direction}`]: true,\n    }\"\n    @scroll.passive=\"handleScroll\"\n  >\n    <div\n      v-if=\"$slots.before\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"before\"\n      />\n    </div>\n\n    <div\n      ref=\"wrapper\"\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n      class=\"vue-recycle-scroller__item-wrapper\"\n    >\n      <div\n        v-for=\"view of pool\"\n        :key=\"view.nr.id\"\n        :style=\"ready ? { transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px)` } : null\"\n        class=\"vue-recycle-scroller__item-view\"\n        :class=\"{ hover: hoverKey === view.nr.key }\"\n        @mouseenter=\"hoverKey = view.nr.key\"\n        @mouseleave=\"hoverKey = null\"\n      >\n        <slot\n          :item=\"view.item\"\n          :index=\"view.nr.index\"\n          :active=\"view.nr.used\"\n        />\n      </div>\n    </div>\n\n    <div\n      v-if=\"$slots.after\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"after\"\n      />\n    </div>\n\n    <ResizeObserver @notify=\"handleResize\" />\n  </div>\n</template>\n\n<script>\nimport { shallowReactive } from 'vue'\nimport { ResizeObserver } from 'vue-resize'\nimport { ObserveVisibility } from 'vue-observe-visibility'\nimport ScrollParent from 'scrollparent'\nimport config from '../config'\nimport { props, simpleArray } from './common'\nimport { supportsPassive } from '../utils'\n\nlet uid = 0\n\nexport default {\n  name: 'RecycleScroller',\n\n  components: {\n    ResizeObserver,\n  },\n\n  directives: {\n    ObserveVisibility,\n  },\n\n  props: {\n    ...props,\n\n    itemSize: {\n      type: Number,\n      default: null,\n    },\n\n    minItemSize: {\n      type: [Number, String],\n      default: null,\n    },\n\n    sizeField: {\n      type: String,\n      default: 'size',\n    },\n\n    typeField: {\n      type: String,\n      default: 'type',\n    },\n\n    buffer: {\n      type: Number,\n      default: 200,\n    },\n\n    pageMode: {\n      type: Boolean,\n      default: false,\n    },\n\n    prerender: {\n      type: Number,\n      default: 0,\n    },\n\n    emitUpdate: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  data () {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null,\n    }\n  },\n\n  computed: {\n    sizes () {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': { accumulator: 0 },\n        }\n        const items = this.items\n        const field = this.sizeField\n        const minItemSize = this.minItemSize\n        let computedMinSize = 10000\n        let accumulator = 0\n        let current\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize\n          if (current < computedMinSize) {\n            computedMinSize = current\n          }\n          accumulator += current\n          sizes[i] = { accumulator, size: current }\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize\n        return sizes\n      }\n      return []\n    },\n\n    simpleArray,\n  },\n\n  watch: {\n    items () {\n      this.updateVisibleItems(true)\n    },\n\n    pageMode () {\n      this.applyPageMode()\n      this.updateVisibleItems(false)\n    },\n\n    sizes: {\n      handler () {\n        this.updateVisibleItems(false)\n      },\n      deep: true,\n    },\n  },\n\n  created () {\n    this.$_startIndex = 0\n    this.$_endIndex = 0\n    this.$_views = new Map()\n    this.$_unusedViews = new Map()\n    this.$_scrollDirty = false\n    this.$_lastUpdateScrollPosition = 0\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true\n      this.updateVisibleItems(false)\n    }\n  },\n\n  mounted () {\n    this.applyPageMode()\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false\n      this.updateVisibleItems(true)\n      this.ready = true\n    })\n  },\n\n  beforeUnmount () {\n    this.removeListeners()\n  },\n\n  methods: {\n    addView (pool, index, item, key, type) {\n      const view = shallowReactive({\n        item,\n        position: 0,\n        nr: {\n          id: uid++,\n          index,\n          used: true,\n          key,\n          type,\n        },\n      })\n      pool.push(view)\n      return view\n    },\n\n    unuseView (view, fake = false) {\n      const unusedViews = this.$_unusedViews\n      const type = view.nr.type\n      let unusedPool = unusedViews.get(type)\n      if (!unusedPool) {\n        unusedPool = []\n        unusedViews.set(type, unusedPool)\n      }\n      unusedPool.push(view)\n      if (!fake) {\n        view.nr.used = false\n        view.position = -9999\n        this.$_views.delete(view.nr.key)\n      }\n    },\n\n    handleResize () {\n      this.$emit('resize')\n      if (this.ready) this.updateVisibleItems(false)\n    },\n\n    handleScroll (event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true\n        requestAnimationFrame(() => {\n          this.$_scrollDirty = false\n          const { continuous } = this.updateVisibleItems(false, true)\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout)\n            this.$_refreshTimout = setTimeout(this.handleScroll, 100)\n          }\n        })\n      }\n    },\n\n    handleVisibilityChange (isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible')\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false)\n          })\n        } else {\n          this.$emit('hidden')\n        }\n      }\n    },\n\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize\n      const minItemSize = this.$_computedMinItemSize\n      const typeField = this.typeField\n      const keyField = this.simpleArray ? null : this.keyField\n      const items = this.items\n      const count = items.length\n      const sizes = this.sizes\n      const views = this.$_views\n      const unusedViews = this.$_unusedViews\n      const pool = this.pool\n      let startIndex, endIndex\n      let totalSize\n\n      if (!count) {\n        startIndex = endIndex = totalSize = 0\n      } else if (this.$_prerender) {\n        startIndex = 0\n        endIndex = this.prerender\n        totalSize = null\n      } else {\n        const scroll = this.getScroll()\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition\n          if (positionDiff < 0) positionDiff = -positionDiff\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n            return {\n              continuous: true,\n            }\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start\n\n        const buffer = this.buffer\n        scroll.start -= buffer\n        scroll.end += buffer\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h\n          let a = 0\n          let b = count - 1\n          let i = ~~(count / 2)\n          let oldI\n\n          // Searching for startIndex\n          do {\n            oldI = i\n            h = sizes[i].accumulator\n            if (h < scroll.start) {\n              a = i\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i\n            }\n            i = ~~((a + b) / 2)\n          } while (i !== oldI)\n          i < 0 && (i = 0)\n          startIndex = i\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1\n          } else {\n            endIndex++\n            // Bounds\n            endIndex > count && (endIndex = count)\n          }\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize)\n          endIndex = Math.ceil(scroll.end / itemSize)\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0)\n          endIndex > count && (endIndex = count)\n\n          totalSize = count * itemSize\n        }\n      }\n\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError()\n      }\n\n      this.totalSize = totalSize\n\n      let view\n\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n\n      if (this.$_continuous !== continuous) {\n        if (continuous) {\n          views.clear()\n          unusedViews.clear()\n          for (let i = 0, l = pool.length; i < l; i++) {\n            view = pool[i]\n            this.unuseView(view)\n          }\n        }\n        this.$_continuous = continuous\n      } else if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i]\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = items.findIndex(\n                item => keyField ? item[keyField] === view.item[keyField] : item === view.item,\n              )\n            }\n\n            // Check if index is still in visible range\n            if (\n              view.nr.index === -1 ||\n              view.nr.index < startIndex ||\n              view.nr.index >= endIndex\n            ) {\n              this.unuseView(view)\n            }\n          }\n        }\n      }\n\n      const unusedIndex = continuous ? null : new Map()\n\n      let item, type, unusedPool\n      let v\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i]\n        const key = keyField ? item[keyField] : item\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n        }\n        view = views.get(key)\n\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view)\n          continue\n        }\n\n        // No view assigned to item\n        if (!view) {\n          if (i === items.length - 1) this.$emit('scrolledtoend')\n          if (i === 0) this.$emit('scrolledtobegin')\n\n          type = item[typeField]\n          unusedPool = unusedViews.get(type)\n\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop()\n              view.item = item\n              view.nr.used = true\n              view.nr.index = i\n              view.nr.key = key\n              view.nr.type = type\n            } else {\n              view = this.addView(pool, i, item, key, type)\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0\n\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type)\n              this.unuseView(view, true)\n              unusedPool = unusedViews.get(type)\n            }\n\n            view = unusedPool[v]\n            view.item = item\n            view.nr.used = true\n            view.nr.index = i\n            view.nr.key = key\n            view.nr.type = type\n            unusedIndex.set(type, v + 1)\n            v++\n          }\n          views.set(key, view)\n        } else {\n          view.nr.used = true\n          view.item = item\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator\n        } else {\n          view.position = i * itemSize\n        }\n      }\n\n      this.$_startIndex = startIndex\n      this.$_endIndex = endIndex\n\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex)\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer)\n      this.$_sortTimer = setTimeout(this.sortViews, 300)\n\n      return {\n        continuous,\n      }\n    },\n\n    getListenerTarget () {\n      let target = ScrollParent(this.$el)\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window\n      }\n      return target\n    },\n\n    getScroll () {\n      const { $el: el, direction } = this\n      const isVertical = direction === 'vertical'\n      let scrollState\n\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect()\n        const boundsSize = isVertical ? bounds.height : bounds.width\n        let start = -(isVertical ? bounds.top : bounds.left)\n        let size = isVertical ? window.innerHeight : window.innerWidth\n        if (start < 0) {\n          size += start\n          start = 0\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start\n        }\n        scrollState = {\n          start,\n          end: start + size,\n        }\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight,\n        }\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth,\n        }\n      }\n\n      return scrollState\n    },\n\n    applyPageMode () {\n      if (this.pageMode) {\n        this.addListeners()\n      } else {\n        this.removeListeners()\n      }\n    },\n\n    addListeners () {\n      this.listenerTarget = this.getListenerTarget()\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive ? {\n        passive: true,\n      } : false)\n      this.listenerTarget.addEventListener('resize', this.handleResize)\n    },\n\n    removeListeners () {\n      if (!this.listenerTarget) {\n        return\n      }\n\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\n\n      this.listenerTarget = null\n    },\n\n    scrollToItem (index) {\n      let scroll\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n      } else {\n        scroll = index * this.itemSize\n      }\n      this.scrollToPosition(scroll)\n    },\n\n    scrollToPosition (position) {\n      if (this.direction === 'vertical') {\n        this.$el.scrollTop = position\n      } else {\n        this.$el.scrollLeft = position\n      }\n    },\n\n    itemsLimitError () {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n      })\n      throw new Error('Rendered items limit reached')\n    },\n\n    sortViews () {\n      this.pool.sort((viewA, viewB) => viewA.nr.index - viewB.nr.index)\n    },\n  },\n}\n</script>\n\n<style>\n.vue-recycle-scroller {\n  position: relative;\n}\n\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n  overflow-y: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n  overflow-x: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal {\n  display: flex;\n}\n\n.vue-recycle-scroller__slot {\n  flex: auto 0 0;\n}\n\n.vue-recycle-scroller__item-wrapper {\n  flex: 1;\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n}\n\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  will-change: transform;\n}\n\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n  width: 100%;\n}\n\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n  height: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n  width: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n  height: 100%;\n}\n</style>\n","<template>\n  <div\n    v-observe-visibility=\"handleVisibilityChange\"\n    class=\"vue-recycle-scroller\"\n    :class=\"{\n      ready,\n      'page-mode': pageMode,\n      [`direction-${direction}`]: true,\n    }\"\n    @scroll.passive=\"handleScroll\"\n  >\n    <div\n      v-if=\"$slots.before\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"before\"\n      />\n    </div>\n\n    <div\n      ref=\"wrapper\"\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n      class=\"vue-recycle-scroller__item-wrapper\"\n    >\n      <div\n        v-for=\"view of pool\"\n        :key=\"view.nr.id\"\n        :style=\"ready ? { transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px)` } : null\"\n        class=\"vue-recycle-scroller__item-view\"\n        :class=\"{ hover: hoverKey === view.nr.key }\"\n        @mouseenter=\"hoverKey = view.nr.key\"\n        @mouseleave=\"hoverKey = null\"\n      >\n        <slot\n          :item=\"view.item\"\n          :index=\"view.nr.index\"\n          :active=\"view.nr.used\"\n        />\n      </div>\n    </div>\n\n    <div\n      v-if=\"$slots.after\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"after\"\n      />\n    </div>\n\n    <ResizeObserver @notify=\"handleResize\" />\n  </div>\n</template>\n\n<script>\nimport { shallowReactive } from 'vue'\nimport { ResizeObserver } from 'vue-resize'\nimport { ObserveVisibility } from 'vue-observe-visibility'\nimport ScrollParent from 'scrollparent'\nimport config from '../config'\nimport { props, simpleArray } from './common'\nimport { supportsPassive } from '../utils'\n\nlet uid = 0\n\nexport default {\n  name: 'RecycleScroller',\n\n  components: {\n    ResizeObserver,\n  },\n\n  directives: {\n    ObserveVisibility,\n  },\n\n  props: {\n    ...props,\n\n    itemSize: {\n      type: Number,\n      default: null,\n    },\n\n    minItemSize: {\n      type: [Number, String],\n      default: null,\n    },\n\n    sizeField: {\n      type: String,\n      default: 'size',\n    },\n\n    typeField: {\n      type: String,\n      default: 'type',\n    },\n\n    buffer: {\n      type: Number,\n      default: 200,\n    },\n\n    pageMode: {\n      type: Boolean,\n      default: false,\n    },\n\n    prerender: {\n      type: Number,\n      default: 0,\n    },\n\n    emitUpdate: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  data () {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null,\n    }\n  },\n\n  computed: {\n    sizes () {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': { accumulator: 0 },\n        }\n        const items = this.items\n        const field = this.sizeField\n        const minItemSize = this.minItemSize\n        let computedMinSize = 10000\n        let accumulator = 0\n        let current\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize\n          if (current < computedMinSize) {\n            computedMinSize = current\n          }\n          accumulator += current\n          sizes[i] = { accumulator, size: current }\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize\n        return sizes\n      }\n      return []\n    },\n\n    simpleArray,\n  },\n\n  watch: {\n    items () {\n      this.updateVisibleItems(true)\n    },\n\n    pageMode () {\n      this.applyPageMode()\n      this.updateVisibleItems(false)\n    },\n\n    sizes: {\n      handler () {\n        this.updateVisibleItems(false)\n      },\n      deep: true,\n    },\n  },\n\n  created () {\n    this.$_startIndex = 0\n    this.$_endIndex = 0\n    this.$_views = new Map()\n    this.$_unusedViews = new Map()\n    this.$_scrollDirty = false\n    this.$_lastUpdateScrollPosition = 0\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true\n      this.updateVisibleItems(false)\n    }\n  },\n\n  mounted () {\n    this.applyPageMode()\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false\n      this.updateVisibleItems(true)\n      this.ready = true\n    })\n  },\n\n  beforeUnmount () {\n    this.removeListeners()\n  },\n\n  methods: {\n    addView (pool, index, item, key, type) {\n      const view = shallowReactive({\n        item,\n        position: 0,\n        nr: {\n          id: uid++,\n          index,\n          used: true,\n          key,\n          type,\n        },\n      })\n      pool.push(view)\n      return view\n    },\n\n    unuseView (view, fake = false) {\n      const unusedViews = this.$_unusedViews\n      const type = view.nr.type\n      let unusedPool = unusedViews.get(type)\n      if (!unusedPool) {\n        unusedPool = []\n        unusedViews.set(type, unusedPool)\n      }\n      unusedPool.push(view)\n      if (!fake) {\n        view.nr.used = false\n        view.position = -9999\n        this.$_views.delete(view.nr.key)\n      }\n    },\n\n    handleResize () {\n      this.$emit('resize')\n      if (this.ready) this.updateVisibleItems(false)\n    },\n\n    handleScroll (event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true\n        requestAnimationFrame(() => {\n          this.$_scrollDirty = false\n          const { continuous } = this.updateVisibleItems(false, true)\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout)\n            this.$_refreshTimout = setTimeout(this.handleScroll, 100)\n          }\n        })\n      }\n    },\n\n    handleVisibilityChange (isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible')\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false)\n          })\n        } else {\n          this.$emit('hidden')\n        }\n      }\n    },\n\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize\n      const minItemSize = this.$_computedMinItemSize\n      const typeField = this.typeField\n      const keyField = this.simpleArray ? null : this.keyField\n      const items = this.items\n      const count = items.length\n      const sizes = this.sizes\n      const views = this.$_views\n      const unusedViews = this.$_unusedViews\n      const pool = this.pool\n      let startIndex, endIndex\n      let totalSize\n\n      if (!count) {\n        startIndex = endIndex = totalSize = 0\n      } else if (this.$_prerender) {\n        startIndex = 0\n        endIndex = this.prerender\n        totalSize = null\n      } else {\n        const scroll = this.getScroll()\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition\n          if (positionDiff < 0) positionDiff = -positionDiff\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n            return {\n              continuous: true,\n            }\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start\n\n        const buffer = this.buffer\n        scroll.start -= buffer\n        scroll.end += buffer\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h\n          let a = 0\n          let b = count - 1\n          let i = ~~(count / 2)\n          let oldI\n\n          // Searching for startIndex\n          do {\n            oldI = i\n            h = sizes[i].accumulator\n            if (h < scroll.start) {\n              a = i\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i\n            }\n            i = ~~((a + b) / 2)\n          } while (i !== oldI)\n          i < 0 && (i = 0)\n          startIndex = i\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1\n          } else {\n            endIndex++\n            // Bounds\n            endIndex > count && (endIndex = count)\n          }\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize)\n          endIndex = Math.ceil(scroll.end / itemSize)\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0)\n          endIndex > count && (endIndex = count)\n\n          totalSize = count * itemSize\n        }\n      }\n\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError()\n      }\n\n      this.totalSize = totalSize\n\n      let view\n\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n\n      if (this.$_continuous !== continuous) {\n        if (continuous) {\n          views.clear()\n          unusedViews.clear()\n          for (let i = 0, l = pool.length; i < l; i++) {\n            view = pool[i]\n            this.unuseView(view)\n          }\n        }\n        this.$_continuous = continuous\n      } else if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i]\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = items.findIndex(\n                item => keyField ? item[keyField] === view.item[keyField] : item === view.item,\n              )\n            }\n\n            // Check if index is still in visible range\n            if (\n              view.nr.index === -1 ||\n              view.nr.index < startIndex ||\n              view.nr.index >= endIndex\n            ) {\n              this.unuseView(view)\n            }\n          }\n        }\n      }\n\n      const unusedIndex = continuous ? null : new Map()\n\n      let item, type, unusedPool\n      let v\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i]\n        const key = keyField ? item[keyField] : item\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n        }\n        view = views.get(key)\n\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view)\n          continue\n        }\n\n        // No view assigned to item\n        if (!view) {\n          if (i === items.length - 1) this.$emit('scrolledtoend')\n          if (i === 0) this.$emit('scrolledtobegin')\n\n          type = item[typeField]\n          unusedPool = unusedViews.get(type)\n\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop()\n              view.item = item\n              view.nr.used = true\n              view.nr.index = i\n              view.nr.key = key\n              view.nr.type = type\n            } else {\n              view = this.addView(pool, i, item, key, type)\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0\n\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type)\n              this.unuseView(view, true)\n              unusedPool = unusedViews.get(type)\n            }\n\n            view = unusedPool[v]\n            view.item = item\n            view.nr.used = true\n            view.nr.index = i\n            view.nr.key = key\n            view.nr.type = type\n            unusedIndex.set(type, v + 1)\n            v++\n          }\n          views.set(key, view)\n        } else {\n          view.nr.used = true\n          view.item = item\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator\n        } else {\n          view.position = i * itemSize\n        }\n      }\n\n      this.$_startIndex = startIndex\n      this.$_endIndex = endIndex\n\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex)\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer)\n      this.$_sortTimer = setTimeout(this.sortViews, 300)\n\n      return {\n        continuous,\n      }\n    },\n\n    getListenerTarget () {\n      let target = ScrollParent(this.$el)\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window\n      }\n      return target\n    },\n\n    getScroll () {\n      const { $el: el, direction } = this\n      const isVertical = direction === 'vertical'\n      let scrollState\n\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect()\n        const boundsSize = isVertical ? bounds.height : bounds.width\n        let start = -(isVertical ? bounds.top : bounds.left)\n        let size = isVertical ? window.innerHeight : window.innerWidth\n        if (start < 0) {\n          size += start\n          start = 0\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start\n        }\n        scrollState = {\n          start,\n          end: start + size,\n        }\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight,\n        }\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth,\n        }\n      }\n\n      return scrollState\n    },\n\n    applyPageMode () {\n      if (this.pageMode) {\n        this.addListeners()\n      } else {\n        this.removeListeners()\n      }\n    },\n\n    addListeners () {\n      this.listenerTarget = this.getListenerTarget()\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive ? {\n        passive: true,\n      } : false)\n      this.listenerTarget.addEventListener('resize', this.handleResize)\n    },\n\n    removeListeners () {\n      if (!this.listenerTarget) {\n        return\n      }\n\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\n\n      this.listenerTarget = null\n    },\n\n    scrollToItem (index) {\n      let scroll\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n      } else {\n        scroll = index * this.itemSize\n      }\n      this.scrollToPosition(scroll)\n    },\n\n    scrollToPosition (position) {\n      if (this.direction === 'vertical') {\n        this.$el.scrollTop = position\n      } else {\n        this.$el.scrollLeft = position\n      }\n    },\n\n    itemsLimitError () {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n      })\n      throw new Error('Rendered items limit reached')\n    },\n\n    sortViews () {\n      this.pool.sort((viewA, viewB) => viewA.nr.index - viewB.nr.index)\n    },\n  },\n}\n</script>\n\n<style>\n.vue-recycle-scroller {\n  position: relative;\n}\n\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n  overflow-y: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n  overflow-x: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal {\n  display: flex;\n}\n\n.vue-recycle-scroller__slot {\n  flex: auto 0 0;\n}\n\n.vue-recycle-scroller__item-wrapper {\n  flex: 1;\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n}\n\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  will-change: transform;\n}\n\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n  width: 100%;\n}\n\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n  height: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n  width: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n  height: 100%;\n}\n</style>\n","<template>\n  <RecycleScroller\n    ref=\"scroller\"\n    :items=\"itemsWithSize\"\n    :min-item-size=\"minItemSize\"\n    :direction=\"direction\"\n    key-field=\"id\"\n    v-bind=\"$attrs\"\n    @resize=\"onScrollerResize\"\n    @visible=\"onScrollerVisible\"\n    v-on=\"listeners\"\n  >\n    <template v-slot:default=\"{ item: itemWithSize, index, active }\">\n      <slot\n        v-bind=\"{\n          item: itemWithSize.item,\n          index,\n          active,\n          itemWithSize\n        }\"\n      />\n    </template>\n    <template v-slot:before>\n      <slot name=\"before\" />\n    </template>\n    <template v-slot:after>\n      <slot name=\"after\" />\n    </template>\n  </RecycleScroller>\n</template>\n\n<script>\nimport RecycleScroller from './RecycleScroller.vue'\nimport { props, simpleArray } from './common'\n\nexport default {\n  name: 'DynamicScroller',\n\n  components: {\n    RecycleScroller,\n  },\n\n  inheritAttrs: false,\n\n  provide () {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        for (const entry of entries) {\n          if (entry.target) {\n            const event = new CustomEvent(\n              'resize',\n              {\n                detail: {\n                  contentRect: entry.contentRect,\n                },\n              },\n            )\n            entry.target.dispatchEvent(event)\n          }\n        }\n      })\n    }\n\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver,\n    }\n  },\n\n  props: {\n    ...props,\n\n    minItemSize: {\n      type: [Number, String],\n      required: true,\n    },\n  },\n\n  data () {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        validSizes: {},\n        keyField: this.keyField,\n        simpleArray: false,\n      },\n    }\n  },\n\n  computed: {\n    simpleArray,\n\n    itemsWithSize () {\n      const result = []\n      const { items, keyField, simpleArray } = this\n      const sizes = this.vscrollData.sizes\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const id = simpleArray ? i : item[keyField]\n        let size = sizes[id]\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0\n        }\n        result.push({\n          item,\n          id,\n          size,\n        })\n      }\n      return result\n    },\n\n    listeners () {\n      const listeners = {}\n      for (const key in this.$listeners) {\n        if (key !== 'resize' && key !== 'visible') {\n          listeners[key] = this.$listeners[key]\n        }\n      }\n      return listeners\n    },\n  },\n\n  watch: {\n    items () {\n      this.forceUpdate(false)\n    },\n\n    simpleArray: {\n      handler (value) {\n        this.vscrollData.simpleArray = value\n      },\n      immediate: true,\n    },\n\n    direction (value) {\n      this.forceUpdate(true)\n    },\n  },\n\n  created () {\n    this.$_updates = []\n    this.$_undefinedSizes = 0\n    this.$_undefinedMap = {}\n  },\n\n  activated () {\n    this.vscrollData.active = true\n  },\n\n  deactivated () {\n    this.vscrollData.active = false\n  },\n\n  methods: {\n    onScrollerResize () {\n      const scroller = this.$refs.scroller\n      if (scroller) {\n        this.forceUpdate()\n      }\n      this.$emit('resize')\n    },\n\n    onScrollerVisible () {\n      this.$emit('vscroll:update', { force: false })\n      this.$emit('visible')\n    },\n\n    forceUpdate (clear = true) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.validSizes = {}\n      }\n      this.$emit('vscroll:update', { force: true })\n    },\n\n    scrollToItem (index) {\n      const scroller = this.$refs.scroller\n      if (scroller) scroller.scrollToItem(index)\n    },\n\n    getItemSize (item, index = undefined) {\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\n      return this.vscrollData.sizes[id] || 0\n    },\n\n    scrollToBottom () {\n      if (this.$_scrollingToBottom) return\n      this.$_scrollingToBottom = true\n      const el = this.$el\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false\n            } else {\n              requestAnimationFrame(cb)\n            }\n          })\n        }\n        requestAnimationFrame(cb)\n      })\n    },\n  },\n}\n</script>\n","<template>\n  <RecycleScroller\n    ref=\"scroller\"\n    :items=\"itemsWithSize\"\n    :min-item-size=\"minItemSize\"\n    :direction=\"direction\"\n    key-field=\"id\"\n    v-bind=\"$attrs\"\n    @resize=\"onScrollerResize\"\n    @visible=\"onScrollerVisible\"\n    v-on=\"listeners\"\n  >\n    <template v-slot:default=\"{ item: itemWithSize, index, active }\">\n      <slot\n        v-bind=\"{\n          item: itemWithSize.item,\n          index,\n          active,\n          itemWithSize\n        }\"\n      />\n    </template>\n    <template v-slot:before>\n      <slot name=\"before\" />\n    </template>\n    <template v-slot:after>\n      <slot name=\"after\" />\n    </template>\n  </RecycleScroller>\n</template>\n\n<script>\nimport RecycleScroller from './RecycleScroller.vue'\nimport { props, simpleArray } from './common'\n\nexport default {\n  name: 'DynamicScroller',\n\n  components: {\n    RecycleScroller,\n  },\n\n  inheritAttrs: false,\n\n  provide () {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        for (const entry of entries) {\n          if (entry.target) {\n            const event = new CustomEvent(\n              'resize',\n              {\n                detail: {\n                  contentRect: entry.contentRect,\n                },\n              },\n            )\n            entry.target.dispatchEvent(event)\n          }\n        }\n      })\n    }\n\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver,\n    }\n  },\n\n  props: {\n    ...props,\n\n    minItemSize: {\n      type: [Number, String],\n      required: true,\n    },\n  },\n\n  data () {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        validSizes: {},\n        keyField: this.keyField,\n        simpleArray: false,\n      },\n    }\n  },\n\n  computed: {\n    simpleArray,\n\n    itemsWithSize () {\n      const result = []\n      const { items, keyField, simpleArray } = this\n      const sizes = this.vscrollData.sizes\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const id = simpleArray ? i : item[keyField]\n        let size = sizes[id]\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0\n        }\n        result.push({\n          item,\n          id,\n          size,\n        })\n      }\n      return result\n    },\n\n    listeners () {\n      const listeners = {}\n      for (const key in this.$listeners) {\n        if (key !== 'resize' && key !== 'visible') {\n          listeners[key] = this.$listeners[key]\n        }\n      }\n      return listeners\n    },\n  },\n\n  watch: {\n    items () {\n      this.forceUpdate(false)\n    },\n\n    simpleArray: {\n      handler (value) {\n        this.vscrollData.simpleArray = value\n      },\n      immediate: true,\n    },\n\n    direction (value) {\n      this.forceUpdate(true)\n    },\n  },\n\n  created () {\n    this.$_updates = []\n    this.$_undefinedSizes = 0\n    this.$_undefinedMap = {}\n  },\n\n  activated () {\n    this.vscrollData.active = true\n  },\n\n  deactivated () {\n    this.vscrollData.active = false\n  },\n\n  methods: {\n    onScrollerResize () {\n      const scroller = this.$refs.scroller\n      if (scroller) {\n        this.forceUpdate()\n      }\n      this.$emit('resize')\n    },\n\n    onScrollerVisible () {\n      this.$emit('vscroll:update', { force: false })\n      this.$emit('visible')\n    },\n\n    forceUpdate (clear = true) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.validSizes = {}\n      }\n      this.$emit('vscroll:update', { force: true })\n    },\n\n    scrollToItem (index) {\n      const scroller = this.$refs.scroller\n      if (scroller) scroller.scrollToItem(index)\n    },\n\n    getItemSize (item, index = undefined) {\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\n      return this.vscrollData.sizes[id] || 0\n    },\n\n    scrollToBottom () {\n      if (this.$_scrollingToBottom) return\n      this.$_scrollingToBottom = true\n      const el = this.$el\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false\n            } else {\n              requestAnimationFrame(cb)\n            }\n          })\n        }\n        requestAnimationFrame(cb)\n      })\n    },\n  },\n}\n</script>\n","<script>\nimport { h } from 'vue'\n\nexport default {\n  name: 'DynamicScrollerItem',\n\n  inject: [\n    'vscrollData',\n    'vscrollParent',\n    'vscrollResizeObserver',\n  ],\n\n  props: {\n    // eslint-disable-next-line vue/require-prop-types\n    item: {\n      required: true,\n    },\n\n    watchData: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Indicates if the view is actively used to display an item.\n     */\n    active: {\n      type: Boolean,\n      required: true,\n    },\n\n    index: {\n      type: Number,\n      default: undefined,\n    },\n\n    sizeDependencies: {\n      type: [Array, Object],\n      default: null,\n    },\n\n    emitResize: {\n      type: Boolean,\n      default: false,\n    },\n\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n\n  computed: {\n    id () {\n      return this.vscrollData.simpleArray ? this.index : this.item[this.vscrollData.keyField]\n    },\n\n    size () {\n      return (this.vscrollData.validSizes[this.id] && this.vscrollData.sizes[this.id]) || 0\n    },\n\n    finalActive () {\n      return this.active && this.vscrollData.active\n    },\n  },\n\n  watch: {\n    watchData: 'updateWatchData',\n\n    id () {\n      if (!this.size) {\n        this.onDataUpdate()\n      }\n    },\n\n    finalActive (value) {\n      if (!this.size) {\n        if (value) {\n          if (!this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes++\n            this.vscrollParent.$_undefinedMap[this.id] = true\n          }\n        } else {\n          if (this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes--\n            this.vscrollParent.$_undefinedMap[this.id] = false\n          }\n        }\n      }\n\n      if (this.vscrollResizeObserver) {\n        if (value) {\n          this.observeSize()\n        } else {\n          this.unobserveSize()\n        }\n      } else if (value && this.$_pendingVScrollUpdate === this.id) {\n        this.updateSize()\n      }\n    },\n  },\n\n  created () {\n    if (this.$isServer) return\n\n    this.$_forceNextVScrollUpdate = null\n    this.updateWatchData()\n\n    if (!this.vscrollResizeObserver) {\n      for (const k in this.sizeDependencies) {\n        this.$watch(() => this.sizeDependencies[k], this.onDataUpdate)\n      }\n\n      this.vscrollParent.$on('vscroll:update', this.onVscrollUpdate)\n      this.vscrollParent.$on('vscroll:update-size', this.onVscrollUpdateSize)\n    }\n  },\n\n  mounted () {\n    if (this.vscrollData.active) {\n      this.updateSize()\n      this.observeSize()\n    }\n  },\n\n  beforeUnmount () {\n    this.vscrollParent.$off('vscroll:update', this.onVscrollUpdate)\n    this.vscrollParent.$off('vscroll:update-size', this.onVscrollUpdateSize)\n    this.unobserveSize()\n  },\n\n  methods: {\n    updateSize () {\n      if (this.finalActive) {\n        if (this.$_pendingSizeUpdate !== this.id) {\n          this.$_pendingSizeUpdate = this.id\n          this.$_forceNextVScrollUpdate = null\n          this.$_pendingVScrollUpdate = null\n          this.computeSize(this.id)\n        }\n      } else {\n        this.$_forceNextVScrollUpdate = this.id\n      }\n    },\n\n    updateWatchData () {\n      if (this.watchData) {\n        this.$_watchData = this.$watch('data', () => {\n          this.onDataUpdate()\n        }, {\n          deep: true,\n        })\n      } else if (this.$_watchData) {\n        this.$_watchData()\n        this.$_watchData = null\n      }\n    },\n\n    onVscrollUpdate ({ force }) {\n      // If not active, sechedule a size update when it becomes active\n      if (!this.finalActive && force) {\n        this.$_pendingVScrollUpdate = this.id\n      }\n\n      if (this.$_forceNextVScrollUpdate === this.id || force || !this.size) {\n        this.updateSize()\n      }\n    },\n\n    onDataUpdate () {\n      this.updateSize()\n    },\n\n    computeSize (id) {\n      this.$nextTick(() => {\n        if (this.id === id) {\n          const width = this.$el.offsetWidth\n          const height = this.$el.offsetHeight\n          this.applySize(width, height)\n        }\n        this.$_pendingSizeUpdate = null\n      })\n    },\n\n    applySize (width, height) {\n      const size = Math.round(this.vscrollParent.direction === 'vertical' ? height : width)\n      if (size && this.size !== size) {\n        if (this.vscrollParent.$_undefinedMap[this.id]) {\n          this.vscrollParent.$_undefinedSizes--\n          this.vscrollParent.$_undefinedMap[this.id] = undefined\n        }\n        this.$set(this.vscrollData.sizes, this.id, size)\n        this.$set(this.vscrollData.validSizes, this.id, true)\n        if (this.emitResize) this.$emit('resize', this.id)\n      }\n    },\n\n    observeSize () {\n      if (!this.vscrollResizeObserver) return\n      this.vscrollResizeObserver.observe(this.$el.parentNode)\n      this.$el.parentNode.addEventListener('resize', this.onResize)\n    },\n\n    unobserveSize () {\n      if (!this.vscrollResizeObserver) return\n      this.vscrollResizeObserver.unobserve(this.$el.parentNode)\n      this.$el.parentNode.removeEventListener('resize', this.onResize)\n    },\n\n    onResize (event) {\n      const { width, height } = event.detail.contentRect\n      this.applySize(width, height)\n    },\n  },\n\n  render () {\n    return h(this.tag, this.$slots.default)\n  },\n}\n</script>\n","import { reactive } from 'vue'\n\nexport default function ({\n  idProp = vm => vm.item.id,\n} = {}) {\n  const store = reactive({})\n\n  // @vue/component\n  return {\n    data () {\n      return {\n        idState: null,\n      }\n    },\n\n    created () {\n      this.$_id = null\n      if (typeof idProp === 'function') {\n        this.$_getId = () => idProp.call(this, this)\n      } else {\n        this.$_getId = () => this[idProp]\n      }\n      this.$watch(this.$_getId, {\n        handler (value) {\n          this.$nextTick(() => {\n            this.$_id = value\n          })\n        },\n        immediate: true,\n      })\n      this.$_updateIdState()\n    },\n\n    beforeUpdate () {\n      this.$_updateIdState()\n    },\n\n    methods: {\n      /**\n       * Initialize an idState\n       * @param {number|string} id Unique id for the data\n       */\n      $_idStateInit (id) {\n        const factory = this.$options.idState\n        if (typeof factory === 'function') {\n          const data = factory.call(this, this)\n          store[id] = data\n          this.$_id = id\n          return data\n        } else {\n          throw new Error('[mixin IdState] Missing `idState` function on component definition.')\n        }\n      },\n\n      /**\n       * Ensure idState is created and up-to-date\n       */\n      $_updateIdState () {\n        const id = this.$_getId()\n        if (id == null) {\n          console.warn(`No id found for IdState with idProp: '${idProp}'.`)\n        }\n        if (id !== this.$_id) {\n          if (!store[id]) {\n            this.$_idStateInit(id)\n          }\n          this.idState = store[id]\n        }\n      },\n    },\n  }\n}\n","import config from './config'\n\nimport RecycleScroller from './components/RecycleScroller.vue'\nimport DynamicScroller from './components/DynamicScroller.vue'\nimport DynamicScrollerItem from './components/DynamicScrollerItem.vue'\n\nexport { default as IdState } from './mixins/IdState'\n\nexport {\n  RecycleScroller,\n  DynamicScroller,\n  DynamicScrollerItem,\n}\n\nfunction registerComponents (Vue, prefix) {\n  Vue.component(`${prefix}recycle-scroller`, RecycleScroller)\n  Vue.component(`${prefix}RecycleScroller`, RecycleScroller)\n  Vue.component(`${prefix}dynamic-scroller`, DynamicScroller)\n  Vue.component(`${prefix}DynamicScroller`, DynamicScroller)\n  Vue.component(`${prefix}dynamic-scroller-item`, DynamicScrollerItem)\n  Vue.component(`${prefix}DynamicScrollerItem`, DynamicScrollerItem)\n}\n\nconst plugin = {\n  // eslint-disable-next-line no-undef\n  version: VERSION,\n  install (Vue, options) {\n    const finalOptions = Object.assign({}, {\n      installComponents: true,\n      componentsPrefix: '',\n    }, options)\n\n    for (const key in finalOptions) {\n      if (typeof finalOptions[key] !== 'undefined') {\n        config[key] = finalOptions[key]\n      }\n    }\n\n    if (finalOptions.installComponents) {\n      registerComponents(Vue, finalOptions.componentsPrefix)\n    }\n  },\n}\n\nexport default plugin\n\n// Auto-install\nlet GlobalVue = null\nif (typeof window !== 'undefined') {\n  GlobalVue = window.Vue\n} else if (typeof global !== 'undefined') {\n  GlobalVue = global.Vue\n}\nif (GlobalVue) {\n  GlobalVue.use(plugin)\n}\n"],"names":["itemsLimit","props","items","type","Array","required","keyField","String","default","direction","validator","value","includes","simpleArray","length","supportsPassive","window","opts","Object","defineProperty","get","addEventListener","e","uid","name","components","ResizeObserver","directives","ObserveVisibility","itemSize","Number","minItemSize","sizeField","typeField","buffer","pageMode","Boolean","prerender","emitUpdate","data","pool","totalSize","ready","hoverKey","computed","sizes","accumulator","field","computedMinSize","current","i","l","size","$_computedMinItemSize","watch","updateVisibleItems","applyPageMode","handler","deep","created","$_startIndex","$_endIndex","$_views","Map","$_unusedViews","$_scrollDirty","$_lastUpdateScrollPosition","$_prerender","mounted","$nextTick","beforeUnmount","removeListeners","methods","addView","index","item","key","view","shallowReactive","position","nr","id","used","push","unuseView","fake","unusedViews","unusedPool","set","delete","handleResize","$emit","handleScroll","event","requestAnimationFrame","continuous","clearTimeout","$_refreshTimout","setTimeout","handleVisibilityChange","isVisible","entry","boundingClientRect","width","height","checkItem","checkPositionDiff","count","views","startIndex","endIndex","scroll","getScroll","positionDiff","start","end","h","a","b","oldI","Math","ceil","config","itemsLimitError","$_continuous","clear","findIndex","unusedIndex","v","Error","pop","$_sortTimer","sortViews","getListenerTarget","target","ScrollParent","$el","document","documentElement","body","el","isVertical","scrollState","bounds","getBoundingClientRect","boundsSize","top","left","innerHeight","innerWidth","scrollTop","clientHeight","scrollLeft","clientWidth","addListeners","listenerTarget","passive","removeEventListener","scrollToItem","scrollToPosition","console","log","sort","viewA","viewB","class","_createBlock","$options","_ctx","before","_hoisted_1","_renderSlot","_createVNode","ref","style","$data","onMouseenter","onMouseleave","active","after","_hoisted_2","onNotify","RecycleScroller","inheritAttrs","provide","$_resizeObserver","entries","CustomEvent","detail","contentRect","dispatchEvent","vscrollData","vscrollParent","vscrollResizeObserver","validSizes","itemsWithSize","result","$_undefinedMap","listeners","$listeners","forceUpdate","immediate","$_updates","$_undefinedSizes","activated","deactivated","onScrollerResize","scroller","$refs","onScrollerVisible","force","getItemSize","undefined","indexOf","scrollToBottom","$_scrollingToBottom","scrollHeight","cb","_mergeProps","$props","onResize","onVisible","_toHandlers","itemWithSize","inject","watchData","sizeDependencies","emitResize","tag","finalActive","onDataUpdate","observeSize","unobserveSize","$_pendingVScrollUpdate","updateSize","$isServer","$_forceNextVScrollUpdate","updateWatchData","k","$watch","$on","onVscrollUpdate","onVscrollUpdateSize","$off","$_pendingSizeUpdate","computeSize","$_watchData","offsetWidth","offsetHeight","applySize","round","$set","observe","parentNode","unobserve","render","$slots","idProp","vm","store","reactive","idState","$_id","$_getId","call","$_updateIdState","beforeUpdate","$_idStateInit","factory","warn","registerComponents","Vue","prefix","component","DynamicScroller","DynamicScrollerItem","plugin","version","VERSION","install","options","finalOptions","assign","installComponents","componentsPrefix","GlobalVue","global","use"],"mappings":"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"}