{"version":3,"file":"vue-virtual-scroller.min.js","sources":["../src/config.js","../node_modules/vue-resize/dist/vue-resize.esm.js","../node_modules/vue-observe-visibility/dist/vue-observe-visibility.esm.js","../node_modules/scrollparent/scrollparent.js","../src/components/common.js","../src/utils.js","../src/components/RecycleScroller.vue","../src/components/RecycleScroller.vue?vue&type=template&id=093a936d&lang.js","../src/components/DynamicScroller.vue","../src/components/DynamicScroller.vue?vue&type=template&id=76e15f19&lang.js","../src/components/DynamicScrollerItem.vue","../src/index.js","../src/mixins/IdState.js"],"sourcesContent":["export default {\n  itemsLimit: 1000,\n}\n","import { nextTick, pushScopeId, popScopeId, openBlock, createBlock, withScopeId } from 'vue';\n\nfunction getInternetExplorerVersion() {\n  var ua = window.navigator.userAgent;\n  var msie = ua.indexOf('MSIE ');\n\n  if (msie > 0) {\n    // IE 10 or older => return version number\n    return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n  }\n\n  var trident = ua.indexOf('Trident/');\n\n  if (trident > 0) {\n    // IE 11 => return version number\n    var rv = ua.indexOf('rv:');\n    return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n  }\n\n  var edge = ua.indexOf('Edge/');\n\n  if (edge > 0) {\n    // Edge (IE 12+) => return version number\n    return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n  } // other browser\n\n\n  return -1;\n}\n\nlet isIE;\n\nfunction initCompat () {\n  if (!initCompat.init) {\n    initCompat.init = true;\n    isIE = getInternetExplorerVersion() !== -1;\n  }\n}\n\nvar script = {\n  name: 'ResizeObserver',\n\n  props: {\n    emitOnMount: {\n      type: Boolean,\n      default: false,\n    },\n\n    ignoreWidth: {\n      type: Boolean,\n      default: false,\n    },\n\n    ignoreHeight: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  emits: [\n    'notify',\n  ],\n\n  mounted () {\n    initCompat();\n    nextTick(() => {\n      this._w = this.$el.offsetWidth;\n      this._h = this.$el.offsetHeight;\n      if (this.emitOnMount) {\n        this.emitSize();\n      }\n    });\n    const object = document.createElement('object');\n    this._resizeObject = object;\n    object.setAttribute('aria-hidden', 'true');\n    object.setAttribute('tabindex', -1);\n    object.onload = this.addResizeHandlers;\n    object.type = 'text/html';\n    if (isIE) {\n      this.$el.appendChild(object);\n    }\n    object.data = 'about:blank';\n    if (!isIE) {\n      this.$el.appendChild(object);\n    }\n  },\n\n  beforeUnmount () {\n    this.removeResizeHandlers();\n  },\n\n  methods: {\n    compareAndNotify () {\n      if ((!this.ignoreWidth && this._w !== this.$el.offsetWidth) || (!this.ignoreHeight && this._h !== this.$el.offsetHeight)) {\n        this._w = this.$el.offsetWidth;\n        this._h = this.$el.offsetHeight;\n        this.emitSize();\n      }\n    },\n\n    emitSize () {\n      this.$emit('notify', {\n        width: this._w,\n        height: this._h,\n      });\n    },\n\n    addResizeHandlers () {\n      this._resizeObject.contentDocument.defaultView.addEventListener('resize', this.compareAndNotify);\n      this.compareAndNotify();\n    },\n\n    removeResizeHandlers () {\n      if (this._resizeObject && this._resizeObject.onload) {\n        if (!isIE && this._resizeObject.contentDocument) {\n          this._resizeObject.contentDocument.defaultView.removeEventListener('resize', this.compareAndNotify);\n        }\n        this.$el.removeChild(this._resizeObject);\n        this._resizeObject.onload = null;\n        this._resizeObject = null;\n      }\n    },\n  },\n};\n\nconst _withId = /*#__PURE__*/withScopeId(\"data-v-b329ee4c\");\n\npushScopeId(\"data-v-b329ee4c\");\nconst _hoisted_1 = {\n  class: \"resize-observer\",\n  tabindex: \"-1\"\n};\npopScopeId();\n\nconst render = /*#__PURE__*/_withId((_ctx, _cache, $props, $setup, $data, $options) => {\n  return (openBlock(), createBlock(\"div\", _hoisted_1))\n});\n\nscript.render = render;\nscript.__scopeId = \"data-v-b329ee4c\";\nscript.__file = \"src/components/ResizeObserver.vue\";\n\nfunction install(app) {\n  // eslint-disable-next-line vue/component-definition-name-casing\n  app.component('resize-observer', script);\n  app.component('ResizeObserver', script);\n}\n\nvar plugin = {\n  // eslint-disable-next-line no-undef\n  version: \"2.0.0-alpha.1\",\n  install: install\n};\n\nexport default plugin;\nexport { script as ResizeObserver, install };\n//# sourceMappingURL=vue-resize.esm.js.map\n","import { nextTick } from 'vue';\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction processOptions(value) {\n  var options;\n\n  if (typeof value === 'function') {\n    // Simple options (callback-only)\n    options = {\n      callback: value\n    };\n  } else {\n    // Options object\n    options = value;\n  }\n\n  return options;\n}\nfunction throttle(callback, delay) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var timeout;\n  var lastState;\n  var currentArgs;\n\n  var throttled = function throttled(state) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    currentArgs = args;\n    if (timeout && state === lastState) return;\n    var leading = options.leading;\n\n    if (typeof leading === 'function') {\n      leading = leading(state, lastState);\n    }\n\n    if ((!timeout || state !== lastState) && leading) {\n      callback.apply(void 0, [state].concat(_toConsumableArray(currentArgs)));\n    }\n\n    lastState = state;\n    clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      callback.apply(void 0, [state].concat(_toConsumableArray(currentArgs)));\n      timeout = 0;\n    }, delay);\n  };\n\n  throttled._clear = function () {\n    clearTimeout(timeout);\n    timeout = null;\n  };\n\n  return throttled;\n}\nfunction deepEqual(val1, val2) {\n  if (val1 === val2) return true;\n\n  if (_typeof(val1) === 'object') {\n    for (var key in val1) {\n      if (!deepEqual(val1[key], val2[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nvar VisibilityState = /*#__PURE__*/function () {\n  function VisibilityState(el, options, vnode) {\n    _classCallCheck(this, VisibilityState);\n\n    this.el = el;\n    this.observer = null;\n    this.frozen = false;\n    this.createObserver(options, vnode);\n  }\n\n  _createClass(VisibilityState, [{\n    key: \"createObserver\",\n    value: function createObserver(options, vnode) {\n      var _this = this;\n\n      if (this.observer) {\n        this.destroyObserver();\n      }\n\n      if (this.frozen) return;\n      this.options = processOptions(options);\n\n      this.callback = function (result, entry) {\n        _this.options.callback(result, entry);\n\n        if (result && _this.options.once) {\n          _this.frozen = true;\n\n          _this.destroyObserver();\n        }\n      }; // Throttle\n\n\n      if (this.callback && this.options.throttle) {\n        var _ref = this.options.throttleOptions || {},\n            _leading = _ref.leading;\n\n        this.callback = throttle(this.callback, this.options.throttle, {\n          leading: function leading(state) {\n            return _leading === 'both' || _leading === 'visible' && state || _leading === 'hidden' && !state;\n          }\n        });\n      }\n\n      this.oldResult = undefined;\n      this.observer = new IntersectionObserver(function (entries) {\n        var entry = entries[0];\n\n        if (entries.length > 1) {\n          var intersectingEntry = entries.find(function (e) {\n            return e.isIntersecting;\n          });\n\n          if (intersectingEntry) {\n            entry = intersectingEntry;\n          }\n        }\n\n        if (_this.callback) {\n          // Use isIntersecting if possible because browsers can report isIntersecting as true, but intersectionRatio as 0, when something very slowly enters the viewport.\n          var result = entry.isIntersecting && entry.intersectionRatio >= _this.threshold;\n          if (result === _this.oldResult) return;\n          _this.oldResult = result;\n\n          _this.callback(result, entry);\n        }\n      }, this.options.intersection); // Wait for the element to be in document\n\n      nextTick(function () {\n        if (_this.observer) {\n          _this.observer.observe(_this.el);\n        }\n      });\n    }\n  }, {\n    key: \"destroyObserver\",\n    value: function destroyObserver() {\n      if (this.observer) {\n        this.observer.disconnect();\n        this.observer = null;\n      } // Cancel throttled call\n\n\n      if (this.callback && this.callback._clear) {\n        this.callback._clear();\n\n        this.callback = null;\n      }\n    }\n  }, {\n    key: \"threshold\",\n    get: function get() {\n      return this.options.intersection && typeof this.options.intersection.threshold === 'number' ? this.options.intersection.threshold : 0;\n    }\n  }]);\n\n  return VisibilityState;\n}();\n\nfunction beforeMount(el, _ref2, vnode) {\n  var value = _ref2.value;\n  if (!value) return;\n\n  if (typeof IntersectionObserver === 'undefined') {\n    console.warn('[vue-observe-visibility] IntersectionObserver API is not available in your browser. Please install this polyfill: https://github.com/w3c/IntersectionObserver/tree/master/polyfill');\n  } else {\n    var state = new VisibilityState(el, value, vnode);\n    el._vue_visibilityState = state;\n  }\n}\n\nfunction updated(el, _ref3, vnode) {\n  var value = _ref3.value,\n      oldValue = _ref3.oldValue;\n  if (deepEqual(value, oldValue)) return;\n  var state = el._vue_visibilityState;\n\n  if (!value) {\n    unmounted(el);\n    return;\n  }\n\n  if (state) {\n    state.createObserver(value, vnode);\n  } else {\n    beforeMount(el, {\n      value: value\n    }, vnode);\n  }\n}\n\nfunction unmounted(el) {\n  var state = el._vue_visibilityState;\n\n  if (state) {\n    state.destroyObserver();\n    delete el._vue_visibilityState;\n  }\n}\n\nvar ObserveVisibility = {\n  beforeMount: beforeMount,\n  updated: updated,\n  unmounted: unmounted\n};\n\nfunction install(app) {\n  app.directive('observe-visibility', ObserveVisibility);\n  /* -- Add more components here -- */\n}\n/* -- Plugin definition & Auto-install -- */\n\n/* You shouldn't have to modify the code below */\n// Plugin\n\nvar plugin = {\n  // eslint-disable-next-line no-undef\n  version: \"2.0.0-alpha.1\",\n  install: install\n};\n\nexport default plugin;\nexport { ObserveVisibility, install };\n","(function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if (typeof module === \"object\" && module.exports) {\n    module.exports = factory();\n  } else {\n    root.Scrollparent = factory();\n  }\n}(this, function () {\n  var regex = /(auto|scroll)/;\n\n  var parents = function (node, ps) {\n    if (node.parentNode === null) { return ps; }\n\n    return parents(node.parentNode, ps.concat([node]));\n  };\n\n  var style = function (node, prop) {\n    return getComputedStyle(node, null).getPropertyValue(prop);\n  };\n\n  var overflow = function (node) {\n    return style(node, \"overflow\") + style(node, \"overflow-y\") + style(node, \"overflow-x\");\n  };\n\n  var scroll = function (node) {\n   return regex.test(overflow(node));\n  };\n\n  var scrollParent = function (node) {\n    if (!(node instanceof HTMLElement || node instanceof SVGElement)) {\n      return ;\n    }\n\n    var ps = parents(node.parentNode, []);\n\n    for (var i = 0; i < ps.length; i += 1) {\n      if (scroll(ps[i])) {\n        return ps[i];\n      }\n    }\n\n    return document.scrollingElement || document.documentElement;\n  };\n\n  return scrollParent;\n}));\n","export const props = {\n  items: {\n    type: Array,\n    required: true,\n  },\n\n  keyField: {\n    type: String,\n    default: 'id',\n  },\n\n  direction: {\n    type: String,\n    default: 'vertical',\n    validator: (value) => ['vertical', 'horizontal'].includes(value),\n  },\n}\n\nexport function simpleArray () {\n  return this.items.length && typeof this.items[0] !== 'object'\n}\n","export let supportsPassive = false\n\nif (typeof window !== 'undefined') {\n  supportsPassive = false\n  try {\n    var opts = Object.defineProperty({}, 'passive', {\n      get () {\n        supportsPassive = true\n      },\n    })\n    window.addEventListener('test', null, opts)\n  } catch (e) {}\n}\n","<template>\n  <div\n    v-observe-visibility=\"handleVisibilityChange\"\n    class=\"vue-recycle-scroller\"\n    :class=\"{\n      ready,\n      'page-mode': pageMode,\n      [`direction-${direction}`]: true,\n    }\"\n    @scroll.passive=\"handleScroll\"\n  >\n    <div\n      v-if=\"$slots.before\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"before\"\n      />\n    </div>\n\n    <div\n      ref=\"wrapper\"\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n      class=\"vue-recycle-scroller__item-wrapper\"\n    >\n      <div\n        v-for=\"view of pool\"\n        :key=\"view.nr.id\"\n        :style=\"ready ? { transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px)` } : null\"\n        class=\"vue-recycle-scroller__item-view\"\n        :class=\"{ hover: hoverKey === view.nr.key }\"\n        @mouseenter=\"hoverKey = view.nr.key\"\n        @mouseleave=\"hoverKey = null\"\n      >\n        <slot\n          :item=\"view.item\"\n          :index=\"view.nr.index\"\n          :active=\"view.nr.used\"\n        />\n      </div>\n    </div>\n\n    <div\n      v-if=\"$slots.after\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"after\"\n      />\n    </div>\n\n    <ResizeObserver @notify=\"handleResize\" />\n  </div>\n</template>\n\n<script>\nimport { shallowReactive } from 'vue'\nimport { ResizeObserver } from 'vue-resize'\nimport { ObserveVisibility } from 'vue-observe-visibility'\nimport ScrollParent from 'scrollparent'\nimport config from '../config'\nimport { props, simpleArray } from './common'\nimport { supportsPassive } from '../utils'\n\nlet uid = 0\n\nexport default {\n  name: 'RecycleScroller',\n\n  components: {\n    ResizeObserver,\n  },\n\n  directives: {\n    ObserveVisibility,\n  },\n\n  props: {\n    ...props,\n\n    itemSize: {\n      type: Number,\n      default: null,\n    },\n\n    minItemSize: {\n      type: [Number, String],\n      default: null,\n    },\n\n    sizeField: {\n      type: String,\n      default: 'size',\n    },\n\n    typeField: {\n      type: String,\n      default: 'type',\n    },\n\n    buffer: {\n      type: Number,\n      default: 200,\n    },\n\n    pageMode: {\n      type: Boolean,\n      default: false,\n    },\n\n    prerender: {\n      type: Number,\n      default: 0,\n    },\n\n    emitUpdate: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  data () {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null,\n    }\n  },\n\n  computed: {\n    sizes () {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': { accumulator: 0 },\n        }\n        const items = this.items\n        const field = this.sizeField\n        const minItemSize = this.minItemSize\n        let computedMinSize = 10000\n        let accumulator = 0\n        let current\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize\n          if (current < computedMinSize) {\n            computedMinSize = current\n          }\n          accumulator += current\n          sizes[i] = { accumulator, size: current }\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize\n        return sizes\n      }\n      return []\n    },\n\n    simpleArray,\n  },\n\n  watch: {\n    items () {\n      this.updateVisibleItems(true)\n    },\n\n    pageMode () {\n      this.applyPageMode()\n      this.updateVisibleItems(false)\n    },\n\n    sizes: {\n      handler () {\n        this.updateVisibleItems(false)\n      },\n      deep: true,\n    },\n  },\n\n  created () {\n    this.$_startIndex = 0\n    this.$_endIndex = 0\n    this.$_views = new Map()\n    this.$_unusedViews = new Map()\n    this.$_scrollDirty = false\n    this.$_lastUpdateScrollPosition = 0\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true\n      this.updateVisibleItems(false)\n    }\n  },\n\n  mounted () {\n    this.applyPageMode()\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false\n      this.updateVisibleItems(true)\n      this.ready = true\n    })\n  },\n\n  beforeUnmount () {\n    this.removeListeners()\n  },\n\n  methods: {\n    addView (pool, index, item, key, type) {\n      const view = shallowReactive({\n        item,\n        position: 0,\n        nr: {\n          id: uid++,\n          index,\n          used: true,\n          key,\n          type,\n        },\n      })\n      pool.push(view)\n      return view\n    },\n\n    unuseView (view, fake = false) {\n      const unusedViews = this.$_unusedViews\n      const type = view.nr.type\n      let unusedPool = unusedViews.get(type)\n      if (!unusedPool) {\n        unusedPool = []\n        unusedViews.set(type, unusedPool)\n      }\n      unusedPool.push(view)\n      if (!fake) {\n        view.nr.used = false\n        view.position = -9999\n        this.$_views.delete(view.nr.key)\n      }\n    },\n\n    handleResize () {\n      this.$emit('resize')\n      if (this.ready) this.updateVisibleItems(false)\n    },\n\n    handleScroll (event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true\n        requestAnimationFrame(() => {\n          this.$_scrollDirty = false\n          const { continuous } = this.updateVisibleItems(false, true)\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout)\n            this.$_refreshTimout = setTimeout(this.handleScroll, 100)\n          }\n        })\n      }\n    },\n\n    handleVisibilityChange (isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible')\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false)\n          })\n        } else {\n          this.$emit('hidden')\n        }\n      }\n    },\n\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize\n      const minItemSize = this.$_computedMinItemSize\n      const typeField = this.typeField\n      const keyField = this.simpleArray ? null : this.keyField\n      const items = this.items\n      const count = items.length\n      const sizes = this.sizes\n      const views = this.$_views\n      const unusedViews = this.$_unusedViews\n      const pool = this.pool\n      let startIndex, endIndex\n      let totalSize\n\n      if (!count) {\n        startIndex = endIndex = totalSize = 0\n      } else if (this.$_prerender) {\n        startIndex = 0\n        endIndex = this.prerender\n        totalSize = null\n      } else {\n        const scroll = this.getScroll()\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition\n          if (positionDiff < 0) positionDiff = -positionDiff\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n            return {\n              continuous: true,\n            }\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start\n\n        const buffer = this.buffer\n        scroll.start -= buffer\n        scroll.end += buffer\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h\n          let a = 0\n          let b = count - 1\n          let i = ~~(count / 2)\n          let oldI\n\n          // Searching for startIndex\n          do {\n            oldI = i\n            h = sizes[i].accumulator\n            if (h < scroll.start) {\n              a = i\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i\n            }\n            i = ~~((a + b) / 2)\n          } while (i !== oldI)\n          i < 0 && (i = 0)\n          startIndex = i\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1\n          } else {\n            endIndex++\n            // Bounds\n            endIndex > count && (endIndex = count)\n          }\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize)\n          endIndex = Math.ceil(scroll.end / itemSize)\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0)\n          endIndex > count && (endIndex = count)\n\n          totalSize = count * itemSize\n        }\n      }\n\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError()\n      }\n\n      this.totalSize = totalSize\n\n      let view\n\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n\n      if (this.$_continuous !== continuous) {\n        if (continuous) {\n          views.clear()\n          unusedViews.clear()\n          for (let i = 0, l = pool.length; i < l; i++) {\n            view = pool[i]\n            this.unuseView(view)\n          }\n        }\n        this.$_continuous = continuous\n      } else if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i]\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = items.findIndex(\n                item => keyField ? item[keyField] === view.item[keyField] : item === view.item,\n              )\n            }\n\n            // Check if index is still in visible range\n            if (\n              view.nr.index === -1 ||\n              view.nr.index < startIndex ||\n              view.nr.index >= endIndex\n            ) {\n              this.unuseView(view)\n            }\n          }\n        }\n      }\n\n      const unusedIndex = continuous ? null : new Map()\n\n      let item, type, unusedPool\n      let v\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i]\n        const key = keyField ? item[keyField] : item\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n        }\n        view = views.get(key)\n\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view)\n          continue\n        }\n\n        // No view assigned to item\n        if (!view) {\n          if (i === items.length - 1) this.$emit('scrolledtoend')\n          if (i === 0) this.$emit('scrolledtobegin')\n\n          type = item[typeField]\n          unusedPool = unusedViews.get(type)\n\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop()\n              view.item = item\n              view.nr.used = true\n              view.nr.index = i\n              view.nr.key = key\n              view.nr.type = type\n            } else {\n              view = this.addView(pool, i, item, key, type)\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0\n\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type)\n              this.unuseView(view, true)\n              unusedPool = unusedViews.get(type)\n            }\n\n            view = unusedPool[v]\n            view.item = item\n            view.nr.used = true\n            view.nr.index = i\n            view.nr.key = key\n            view.nr.type = type\n            unusedIndex.set(type, v + 1)\n            v++\n          }\n          views.set(key, view)\n        } else {\n          view.nr.used = true\n          view.item = item\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator\n        } else {\n          view.position = i * itemSize\n        }\n      }\n\n      this.$_startIndex = startIndex\n      this.$_endIndex = endIndex\n\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex)\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer)\n      this.$_sortTimer = setTimeout(this.sortViews, 300)\n\n      return {\n        continuous,\n      }\n    },\n\n    getListenerTarget () {\n      let target = ScrollParent(this.$el)\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window\n      }\n      return target\n    },\n\n    getScroll () {\n      const { $el: el, direction } = this\n      const isVertical = direction === 'vertical'\n      let scrollState\n\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect()\n        const boundsSize = isVertical ? bounds.height : bounds.width\n        let start = -(isVertical ? bounds.top : bounds.left)\n        let size = isVertical ? window.innerHeight : window.innerWidth\n        if (start < 0) {\n          size += start\n          start = 0\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start\n        }\n        scrollState = {\n          start,\n          end: start + size,\n        }\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight,\n        }\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth,\n        }\n      }\n\n      return scrollState\n    },\n\n    applyPageMode () {\n      if (this.pageMode) {\n        this.addListeners()\n      } else {\n        this.removeListeners()\n      }\n    },\n\n    addListeners () {\n      this.listenerTarget = this.getListenerTarget()\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive ? {\n        passive: true,\n      } : false)\n      this.listenerTarget.addEventListener('resize', this.handleResize)\n    },\n\n    removeListeners () {\n      if (!this.listenerTarget) {\n        return\n      }\n\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\n\n      this.listenerTarget = null\n    },\n\n    scrollToItem (index) {\n      let scroll\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n      } else {\n        scroll = index * this.itemSize\n      }\n      this.scrollToPosition(scroll)\n    },\n\n    scrollToPosition (position) {\n      if (this.direction === 'vertical') {\n        this.$el.scrollTop = position\n      } else {\n        this.$el.scrollLeft = position\n      }\n    },\n\n    itemsLimitError () {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n      })\n      throw new Error('Rendered items limit reached')\n    },\n\n    sortViews () {\n      this.pool.sort((viewA, viewB) => viewA.nr.index - viewB.nr.index)\n    },\n  },\n}\n</script>\n\n<style>\n.vue-recycle-scroller {\n  position: relative;\n}\n\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n  overflow-y: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n  overflow-x: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal {\n  display: flex;\n}\n\n.vue-recycle-scroller__slot {\n  flex: auto 0 0;\n}\n\n.vue-recycle-scroller__item-wrapper {\n  flex: 1;\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n}\n\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  will-change: transform;\n}\n\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n  width: 100%;\n}\n\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n  height: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n  width: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n  height: 100%;\n}\n</style>\n","<template>\n  <div\n    v-observe-visibility=\"handleVisibilityChange\"\n    class=\"vue-recycle-scroller\"\n    :class=\"{\n      ready,\n      'page-mode': pageMode,\n      [`direction-${direction}`]: true,\n    }\"\n    @scroll.passive=\"handleScroll\"\n  >\n    <div\n      v-if=\"$slots.before\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"before\"\n      />\n    </div>\n\n    <div\n      ref=\"wrapper\"\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n      class=\"vue-recycle-scroller__item-wrapper\"\n    >\n      <div\n        v-for=\"view of pool\"\n        :key=\"view.nr.id\"\n        :style=\"ready ? { transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px)` } : null\"\n        class=\"vue-recycle-scroller__item-view\"\n        :class=\"{ hover: hoverKey === view.nr.key }\"\n        @mouseenter=\"hoverKey = view.nr.key\"\n        @mouseleave=\"hoverKey = null\"\n      >\n        <slot\n          :item=\"view.item\"\n          :index=\"view.nr.index\"\n          :active=\"view.nr.used\"\n        />\n      </div>\n    </div>\n\n    <div\n      v-if=\"$slots.after\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"after\"\n      />\n    </div>\n\n    <ResizeObserver @notify=\"handleResize\" />\n  </div>\n</template>\n\n<script>\nimport { shallowReactive } from 'vue'\nimport { ResizeObserver } from 'vue-resize'\nimport { ObserveVisibility } from 'vue-observe-visibility'\nimport ScrollParent from 'scrollparent'\nimport config from '../config'\nimport { props, simpleArray } from './common'\nimport { supportsPassive } from '../utils'\n\nlet uid = 0\n\nexport default {\n  name: 'RecycleScroller',\n\n  components: {\n    ResizeObserver,\n  },\n\n  directives: {\n    ObserveVisibility,\n  },\n\n  props: {\n    ...props,\n\n    itemSize: {\n      type: Number,\n      default: null,\n    },\n\n    minItemSize: {\n      type: [Number, String],\n      default: null,\n    },\n\n    sizeField: {\n      type: String,\n      default: 'size',\n    },\n\n    typeField: {\n      type: String,\n      default: 'type',\n    },\n\n    buffer: {\n      type: Number,\n      default: 200,\n    },\n\n    pageMode: {\n      type: Boolean,\n      default: false,\n    },\n\n    prerender: {\n      type: Number,\n      default: 0,\n    },\n\n    emitUpdate: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  data () {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null,\n    }\n  },\n\n  computed: {\n    sizes () {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': { accumulator: 0 },\n        }\n        const items = this.items\n        const field = this.sizeField\n        const minItemSize = this.minItemSize\n        let computedMinSize = 10000\n        let accumulator = 0\n        let current\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize\n          if (current < computedMinSize) {\n            computedMinSize = current\n          }\n          accumulator += current\n          sizes[i] = { accumulator, size: current }\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize\n        return sizes\n      }\n      return []\n    },\n\n    simpleArray,\n  },\n\n  watch: {\n    items () {\n      this.updateVisibleItems(true)\n    },\n\n    pageMode () {\n      this.applyPageMode()\n      this.updateVisibleItems(false)\n    },\n\n    sizes: {\n      handler () {\n        this.updateVisibleItems(false)\n      },\n      deep: true,\n    },\n  },\n\n  created () {\n    this.$_startIndex = 0\n    this.$_endIndex = 0\n    this.$_views = new Map()\n    this.$_unusedViews = new Map()\n    this.$_scrollDirty = false\n    this.$_lastUpdateScrollPosition = 0\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true\n      this.updateVisibleItems(false)\n    }\n  },\n\n  mounted () {\n    this.applyPageMode()\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false\n      this.updateVisibleItems(true)\n      this.ready = true\n    })\n  },\n\n  beforeUnmount () {\n    this.removeListeners()\n  },\n\n  methods: {\n    addView (pool, index, item, key, type) {\n      const view = shallowReactive({\n        item,\n        position: 0,\n        nr: {\n          id: uid++,\n          index,\n          used: true,\n          key,\n          type,\n        },\n      })\n      pool.push(view)\n      return view\n    },\n\n    unuseView (view, fake = false) {\n      const unusedViews = this.$_unusedViews\n      const type = view.nr.type\n      let unusedPool = unusedViews.get(type)\n      if (!unusedPool) {\n        unusedPool = []\n        unusedViews.set(type, unusedPool)\n      }\n      unusedPool.push(view)\n      if (!fake) {\n        view.nr.used = false\n        view.position = -9999\n        this.$_views.delete(view.nr.key)\n      }\n    },\n\n    handleResize () {\n      this.$emit('resize')\n      if (this.ready) this.updateVisibleItems(false)\n    },\n\n    handleScroll (event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true\n        requestAnimationFrame(() => {\n          this.$_scrollDirty = false\n          const { continuous } = this.updateVisibleItems(false, true)\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout)\n            this.$_refreshTimout = setTimeout(this.handleScroll, 100)\n          }\n        })\n      }\n    },\n\n    handleVisibilityChange (isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible')\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false)\n          })\n        } else {\n          this.$emit('hidden')\n        }\n      }\n    },\n\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize\n      const minItemSize = this.$_computedMinItemSize\n      const typeField = this.typeField\n      const keyField = this.simpleArray ? null : this.keyField\n      const items = this.items\n      const count = items.length\n      const sizes = this.sizes\n      const views = this.$_views\n      const unusedViews = this.$_unusedViews\n      const pool = this.pool\n      let startIndex, endIndex\n      let totalSize\n\n      if (!count) {\n        startIndex = endIndex = totalSize = 0\n      } else if (this.$_prerender) {\n        startIndex = 0\n        endIndex = this.prerender\n        totalSize = null\n      } else {\n        const scroll = this.getScroll()\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition\n          if (positionDiff < 0) positionDiff = -positionDiff\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n            return {\n              continuous: true,\n            }\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start\n\n        const buffer = this.buffer\n        scroll.start -= buffer\n        scroll.end += buffer\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h\n          let a = 0\n          let b = count - 1\n          let i = ~~(count / 2)\n          let oldI\n\n          // Searching for startIndex\n          do {\n            oldI = i\n            h = sizes[i].accumulator\n            if (h < scroll.start) {\n              a = i\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i\n            }\n            i = ~~((a + b) / 2)\n          } while (i !== oldI)\n          i < 0 && (i = 0)\n          startIndex = i\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1\n          } else {\n            endIndex++\n            // Bounds\n            endIndex > count && (endIndex = count)\n          }\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize)\n          endIndex = Math.ceil(scroll.end / itemSize)\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0)\n          endIndex > count && (endIndex = count)\n\n          totalSize = count * itemSize\n        }\n      }\n\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError()\n      }\n\n      this.totalSize = totalSize\n\n      let view\n\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n\n      if (this.$_continuous !== continuous) {\n        if (continuous) {\n          views.clear()\n          unusedViews.clear()\n          for (let i = 0, l = pool.length; i < l; i++) {\n            view = pool[i]\n            this.unuseView(view)\n          }\n        }\n        this.$_continuous = continuous\n      } else if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i]\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = items.findIndex(\n                item => keyField ? item[keyField] === view.item[keyField] : item === view.item,\n              )\n            }\n\n            // Check if index is still in visible range\n            if (\n              view.nr.index === -1 ||\n              view.nr.index < startIndex ||\n              view.nr.index >= endIndex\n            ) {\n              this.unuseView(view)\n            }\n          }\n        }\n      }\n\n      const unusedIndex = continuous ? null : new Map()\n\n      let item, type, unusedPool\n      let v\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i]\n        const key = keyField ? item[keyField] : item\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n        }\n        view = views.get(key)\n\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view)\n          continue\n        }\n\n        // No view assigned to item\n        if (!view) {\n          if (i === items.length - 1) this.$emit('scrolledtoend')\n          if (i === 0) this.$emit('scrolledtobegin')\n\n          type = item[typeField]\n          unusedPool = unusedViews.get(type)\n\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop()\n              view.item = item\n              view.nr.used = true\n              view.nr.index = i\n              view.nr.key = key\n              view.nr.type = type\n            } else {\n              view = this.addView(pool, i, item, key, type)\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0\n\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type)\n              this.unuseView(view, true)\n              unusedPool = unusedViews.get(type)\n            }\n\n            view = unusedPool[v]\n            view.item = item\n            view.nr.used = true\n            view.nr.index = i\n            view.nr.key = key\n            view.nr.type = type\n            unusedIndex.set(type, v + 1)\n            v++\n          }\n          views.set(key, view)\n        } else {\n          view.nr.used = true\n          view.item = item\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator\n        } else {\n          view.position = i * itemSize\n        }\n      }\n\n      this.$_startIndex = startIndex\n      this.$_endIndex = endIndex\n\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex)\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer)\n      this.$_sortTimer = setTimeout(this.sortViews, 300)\n\n      return {\n        continuous,\n      }\n    },\n\n    getListenerTarget () {\n      let target = ScrollParent(this.$el)\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window\n      }\n      return target\n    },\n\n    getScroll () {\n      const { $el: el, direction } = this\n      const isVertical = direction === 'vertical'\n      let scrollState\n\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect()\n        const boundsSize = isVertical ? bounds.height : bounds.width\n        let start = -(isVertical ? bounds.top : bounds.left)\n        let size = isVertical ? window.innerHeight : window.innerWidth\n        if (start < 0) {\n          size += start\n          start = 0\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start\n        }\n        scrollState = {\n          start,\n          end: start + size,\n        }\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight,\n        }\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth,\n        }\n      }\n\n      return scrollState\n    },\n\n    applyPageMode () {\n      if (this.pageMode) {\n        this.addListeners()\n      } else {\n        this.removeListeners()\n      }\n    },\n\n    addListeners () {\n      this.listenerTarget = this.getListenerTarget()\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive ? {\n        passive: true,\n      } : false)\n      this.listenerTarget.addEventListener('resize', this.handleResize)\n    },\n\n    removeListeners () {\n      if (!this.listenerTarget) {\n        return\n      }\n\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\n\n      this.listenerTarget = null\n    },\n\n    scrollToItem (index) {\n      let scroll\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n      } else {\n        scroll = index * this.itemSize\n      }\n      this.scrollToPosition(scroll)\n    },\n\n    scrollToPosition (position) {\n      if (this.direction === 'vertical') {\n        this.$el.scrollTop = position\n      } else {\n        this.$el.scrollLeft = position\n      }\n    },\n\n    itemsLimitError () {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n      })\n      throw new Error('Rendered items limit reached')\n    },\n\n    sortViews () {\n      this.pool.sort((viewA, viewB) => viewA.nr.index - viewB.nr.index)\n    },\n  },\n}\n</script>\n\n<style>\n.vue-recycle-scroller {\n  position: relative;\n}\n\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n  overflow-y: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n  overflow-x: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal {\n  display: flex;\n}\n\n.vue-recycle-scroller__slot {\n  flex: auto 0 0;\n}\n\n.vue-recycle-scroller__item-wrapper {\n  flex: 1;\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n}\n\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  will-change: transform;\n}\n\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n  width: 100%;\n}\n\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n  height: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n  width: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n  height: 100%;\n}\n</style>\n","<template>\n  <RecycleScroller\n    ref=\"scroller\"\n    :items=\"itemsWithSize\"\n    :min-item-size=\"minItemSize\"\n    :direction=\"direction\"\n    key-field=\"id\"\n    v-bind=\"$attrs\"\n    @resize=\"onScrollerResize\"\n    @visible=\"onScrollerVisible\"\n  >\n    <template v-slot:default=\"{ item: itemWithSize, index, active }\">\n      <slot\n        v-bind=\"{\n          item: itemWithSize.item,\n          index,\n          active,\n          itemWithSize\n        }\"\n      />\n    </template>\n    <template v-slot:before>\n      <slot name=\"before\" />\n    </template>\n    <template v-slot:after>\n      <slot name=\"after\" />\n    </template>\n  </RecycleScroller>\n</template>\n\n<script>\nimport RecycleScroller from './RecycleScroller.vue'\nimport { props, simpleArray } from './common'\n\nexport default {\n  name: 'DynamicScroller',\n\n  components: {\n    RecycleScroller,\n  },\n\n  inheritAttrs: false,\n\n  provide () {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        for (const entry of entries) {\n          if (entry.target) {\n            const event = new CustomEvent(\n              'resize',\n              {\n                detail: {\n                  contentRect: entry.contentRect,\n                },\n              },\n            )\n            entry.target.dispatchEvent(event)\n          }\n        }\n      })\n    }\n\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver,\n    }\n  },\n\n  props: {\n    ...props,\n\n    minItemSize: {\n      type: [Number, String],\n      required: true,\n    },\n  },\n\n  data () {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        validSizes: {},\n        keyField: this.keyField,\n        simpleArray: false,\n      },\n    }\n  },\n\n  computed: {\n    simpleArray,\n\n    itemsWithSize () {\n      const result = []\n      const { items, keyField, simpleArray } = this\n      const sizes = this.vscrollData.sizes\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const id = simpleArray ? i : item[keyField]\n        let size = sizes[id]\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0\n        }\n        result.push({\n          item,\n          id,\n          size,\n        })\n      }\n      return result\n    },\n\n  },\n\n  watch: {\n    items () {\n      this.forceUpdate(false)\n    },\n\n    simpleArray: {\n      handler (value) {\n        this.vscrollData.simpleArray = value\n      },\n      immediate: true,\n    },\n\n    direction (value) {\n      this.forceUpdate(true)\n    },\n  },\n\n  created () {\n    this.$_updates = []\n    this.$_undefinedSizes = 0\n    this.$_undefinedMap = {}\n  },\n\n  activated () {\n    this.vscrollData.active = true\n  },\n\n  deactivated () {\n    this.vscrollData.active = false\n  },\n\n  methods: {\n    onScrollerResize () {\n      const scroller = this.$refs.scroller\n      if (scroller) {\n        this.forceUpdate()\n      }\n      this.$emit('resize')\n    },\n\n    onScrollerVisible () {\n      this.$emit('vscroll:update', { force: false })\n      this.$emit('visible')\n    },\n\n    forceUpdate (clear = true) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.validSizes = {}\n      }\n      this.$emit('vscroll:update', { force: true })\n    },\n\n    scrollToItem (index) {\n      const scroller = this.$refs.scroller\n      if (scroller) scroller.scrollToItem(index)\n    },\n\n    getItemSize (item, index = undefined) {\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\n      return this.vscrollData.sizes[id] || 0\n    },\n\n    scrollToBottom () {\n      if (this.$_scrollingToBottom) return\n      this.$_scrollingToBottom = true\n      const el = this.$el\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false\n            } else {\n              requestAnimationFrame(cb)\n            }\n          })\n        }\n        requestAnimationFrame(cb)\n      })\n    },\n  },\n}\n</script>\n","<template>\n  <RecycleScroller\n    ref=\"scroller\"\n    :items=\"itemsWithSize\"\n    :min-item-size=\"minItemSize\"\n    :direction=\"direction\"\n    key-field=\"id\"\n    v-bind=\"$attrs\"\n    @resize=\"onScrollerResize\"\n    @visible=\"onScrollerVisible\"\n  >\n    <template v-slot:default=\"{ item: itemWithSize, index, active }\">\n      <slot\n        v-bind=\"{\n          item: itemWithSize.item,\n          index,\n          active,\n          itemWithSize\n        }\"\n      />\n    </template>\n    <template v-slot:before>\n      <slot name=\"before\" />\n    </template>\n    <template v-slot:after>\n      <slot name=\"after\" />\n    </template>\n  </RecycleScroller>\n</template>\n\n<script>\nimport RecycleScroller from './RecycleScroller.vue'\nimport { props, simpleArray } from './common'\n\nexport default {\n  name: 'DynamicScroller',\n\n  components: {\n    RecycleScroller,\n  },\n\n  inheritAttrs: false,\n\n  provide () {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        for (const entry of entries) {\n          if (entry.target) {\n            const event = new CustomEvent(\n              'resize',\n              {\n                detail: {\n                  contentRect: entry.contentRect,\n                },\n              },\n            )\n            entry.target.dispatchEvent(event)\n          }\n        }\n      })\n    }\n\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver,\n    }\n  },\n\n  props: {\n    ...props,\n\n    minItemSize: {\n      type: [Number, String],\n      required: true,\n    },\n  },\n\n  data () {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        validSizes: {},\n        keyField: this.keyField,\n        simpleArray: false,\n      },\n    }\n  },\n\n  computed: {\n    simpleArray,\n\n    itemsWithSize () {\n      const result = []\n      const { items, keyField, simpleArray } = this\n      const sizes = this.vscrollData.sizes\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const id = simpleArray ? i : item[keyField]\n        let size = sizes[id]\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0\n        }\n        result.push({\n          item,\n          id,\n          size,\n        })\n      }\n      return result\n    },\n\n  },\n\n  watch: {\n    items () {\n      this.forceUpdate(false)\n    },\n\n    simpleArray: {\n      handler (value) {\n        this.vscrollData.simpleArray = value\n      },\n      immediate: true,\n    },\n\n    direction (value) {\n      this.forceUpdate(true)\n    },\n  },\n\n  created () {\n    this.$_updates = []\n    this.$_undefinedSizes = 0\n    this.$_undefinedMap = {}\n  },\n\n  activated () {\n    this.vscrollData.active = true\n  },\n\n  deactivated () {\n    this.vscrollData.active = false\n  },\n\n  methods: {\n    onScrollerResize () {\n      const scroller = this.$refs.scroller\n      if (scroller) {\n        this.forceUpdate()\n      }\n      this.$emit('resize')\n    },\n\n    onScrollerVisible () {\n      this.$emit('vscroll:update', { force: false })\n      this.$emit('visible')\n    },\n\n    forceUpdate (clear = true) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.validSizes = {}\n      }\n      this.$emit('vscroll:update', { force: true })\n    },\n\n    scrollToItem (index) {\n      const scroller = this.$refs.scroller\n      if (scroller) scroller.scrollToItem(index)\n    },\n\n    getItemSize (item, index = undefined) {\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\n      return this.vscrollData.sizes[id] || 0\n    },\n\n    scrollToBottom () {\n      if (this.$_scrollingToBottom) return\n      this.$_scrollingToBottom = true\n      const el = this.$el\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false\n            } else {\n              requestAnimationFrame(cb)\n            }\n          })\n        }\n        requestAnimationFrame(cb)\n      })\n    },\n  },\n}\n</script>\n","<script>\nimport { h } from 'vue'\n\nexport default {\n  name: 'DynamicScrollerItem',\n\n  inject: [\n    'vscrollData',\n    'vscrollParent',\n    'vscrollResizeObserver',\n  ],\n\n  props: {\n    // eslint-disable-next-line vue/require-prop-types\n    item: {\n      required: true,\n    },\n\n    watchData: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Indicates if the view is actively used to display an item.\n     */\n    active: {\n      type: Boolean,\n      required: true,\n    },\n\n    index: {\n      type: Number,\n      default: undefined,\n    },\n\n    sizeDependencies: {\n      type: [Array, Object],\n      default: null,\n    },\n\n    emitResize: {\n      type: Boolean,\n      default: false,\n    },\n\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n\n  computed: {\n    id () {\n      return this.vscrollData.simpleArray ? this.index : this.item[this.vscrollData.keyField]\n    },\n\n    size () {\n      return (this.vscrollData.validSizes[this.id] && this.vscrollData.sizes[this.id]) || 0\n    },\n\n    finalActive () {\n      return this.active && this.vscrollData.active\n    },\n  },\n\n  watch: {\n    watchData: 'updateWatchData',\n\n    id () {\n      if (!this.size) {\n        this.onDataUpdate()\n      }\n    },\n\n    finalActive (value) {\n      if (!this.size) {\n        if (value) {\n          if (!this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes++\n            this.vscrollParent.$_undefinedMap[this.id] = true\n          }\n        } else {\n          if (this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes--\n            this.vscrollParent.$_undefinedMap[this.id] = false\n          }\n        }\n      }\n\n      if (this.vscrollResizeObserver) {\n        if (value) {\n          this.observeSize()\n        } else {\n          this.unobserveSize()\n        }\n      } else if (value && this.$_pendingVScrollUpdate === this.id) {\n        this.updateSize()\n      }\n    },\n  },\n\n  created () {\n    if (this.$isServer) return\n\n    this.$_forceNextVScrollUpdate = null\n    this.updateWatchData()\n\n    if (!this.vscrollResizeObserver) {\n      for (const k in this.sizeDependencies) {\n        this.$watch(() => this.sizeDependencies[k], this.onDataUpdate)\n      }\n\n      this.vscrollParent.$on('vscroll:update', this.onVscrollUpdate)\n      this.vscrollParent.$on('vscroll:update-size', this.onVscrollUpdateSize)\n    }\n  },\n\n  mounted () {\n    if (this.vscrollData.active) {\n      this.updateSize()\n      this.observeSize()\n    }\n  },\n\n  beforeUnmount () {\n    this.vscrollParent.$off('vscroll:update', this.onVscrollUpdate)\n    this.vscrollParent.$off('vscroll:update-size', this.onVscrollUpdateSize)\n    this.unobserveSize()\n  },\n\n  methods: {\n    updateSize () {\n      if (this.finalActive) {\n        if (this.$_pendingSizeUpdate !== this.id) {\n          this.$_pendingSizeUpdate = this.id\n          this.$_forceNextVScrollUpdate = null\n          this.$_pendingVScrollUpdate = null\n          this.computeSize(this.id)\n        }\n      } else {\n        this.$_forceNextVScrollUpdate = this.id\n      }\n    },\n\n    updateWatchData () {\n      if (this.watchData) {\n        this.$_watchData = this.$watch('data', () => {\n          this.onDataUpdate()\n        }, {\n          deep: true,\n        })\n      } else if (this.$_watchData) {\n        this.$_watchData()\n        this.$_watchData = null\n      }\n    },\n\n    onVscrollUpdate ({ force }) {\n      // If not active, sechedule a size update when it becomes active\n      if (!this.finalActive && force) {\n        this.$_pendingVScrollUpdate = this.id\n      }\n\n      if (this.$_forceNextVScrollUpdate === this.id || force || !this.size) {\n        this.updateSize()\n      }\n    },\n\n    onDataUpdate () {\n      this.updateSize()\n    },\n\n    computeSize (id) {\n      this.$nextTick(() => {\n        if (this.id === id) {\n          const width = this.$el.offsetWidth\n          const height = this.$el.offsetHeight\n          this.applySize(width, height)\n        }\n        this.$_pendingSizeUpdate = null\n      })\n    },\n\n    applySize (width, height) {\n      const size = Math.round(this.vscrollParent.direction === 'vertical' ? height : width)\n      if (size && this.size !== size) {\n        if (this.vscrollParent.$_undefinedMap[this.id]) {\n          this.vscrollParent.$_undefinedSizes--\n          this.vscrollParent.$_undefinedMap[this.id] = undefined\n        }\n        this.vscrollData.sizes[this.id] = size\n        this.vscrollData.validSizes[this.id] = true\n        // this.$set(this.vscrollData.sizes, this.id, size)\n        // this.$set(this.vscrollData.validSizes, this.id, true)\n        if (this.emitResize) this.$emit('resize', this.id)\n      }\n    },\n\n    observeSize () {\n      if (!this.vscrollResizeObserver) return\n      this.vscrollResizeObserver.observe(this.$el.parentNode)\n      this.$el.parentNode.addEventListener('resize', this.onResize)\n    },\n\n    unobserveSize () {\n      if (!this.vscrollResizeObserver) return\n      this.vscrollResizeObserver.unobserve(this.$el.parentNode)\n      this.$el.parentNode.removeEventListener('resize', this.onResize)\n    },\n\n    onResize (event) {\n      const { width, height } = event.detail.contentRect\n      this.applySize(width, height)\n    },\n  },\n\n  render () {\n    return h(this.tag, this.$slots.default())\n  },\n}\n</script>\n","import config from './config'\n\nimport RecycleScroller from './components/RecycleScroller.vue'\nimport DynamicScroller from './components/DynamicScroller.vue'\nimport DynamicScrollerItem from './components/DynamicScrollerItem.vue'\n\nexport { default as IdState } from './mixins/IdState'\n\nexport {\n  RecycleScroller,\n  DynamicScroller,\n  DynamicScrollerItem,\n}\n\nfunction registerComponents (Vue, prefix) {\n  Vue.component(`${prefix}recycle-scroller`, RecycleScroller)\n  Vue.component(`${prefix}RecycleScroller`, RecycleScroller)\n  Vue.component(`${prefix}dynamic-scroller`, DynamicScroller)\n  Vue.component(`${prefix}DynamicScroller`, DynamicScroller)\n  Vue.component(`${prefix}dynamic-scroller-item`, DynamicScrollerItem)\n  Vue.component(`${prefix}DynamicScrollerItem`, DynamicScrollerItem)\n}\n\nconst plugin = {\n  // eslint-disable-next-line no-undef\n  version: VERSION,\n  install (Vue, options) {\n    const finalOptions = Object.assign({}, {\n      installComponents: true,\n      componentsPrefix: '',\n    }, options)\n\n    for (const key in finalOptions) {\n      if (typeof finalOptions[key] !== 'undefined') {\n        config[key] = finalOptions[key]\n      }\n    }\n\n    if (finalOptions.installComponents) {\n      registerComponents(Vue, finalOptions.componentsPrefix)\n    }\n  },\n}\n\nexport default plugin\n\n// Auto-install\nlet GlobalVue = null\nif (typeof window !== 'undefined') {\n  GlobalVue = window.Vue\n} else if (typeof global !== 'undefined') {\n  GlobalVue = global.Vue\n}\nif (GlobalVue) {\n  GlobalVue.use(plugin)\n}\n","import { reactive } from 'vue'\n\nexport default function ({\n  idProp = vm => vm.item.id,\n} = {}) {\n  const store = reactive({})\n\n  // @vue/component\n  return {\n    data () {\n      return {\n        idState: null,\n      }\n    },\n\n    created () {\n      this.$_id = null\n      if (typeof idProp === 'function') {\n        this.$_getId = () => idProp.call(this, this)\n      } else {\n        this.$_getId = () => this[idProp]\n      }\n      this.$watch(this.$_getId, {\n        handler (value) {\n          this.$nextTick(() => {\n            this.$_id = value\n          })\n        },\n        immediate: true,\n      })\n      this.$_updateIdState()\n    },\n\n    beforeUpdate () {\n      this.$_updateIdState()\n    },\n\n    methods: {\n      /**\n       * Initialize an idState\n       * @param {number|string} id Unique id for the data\n       */\n      $_idStateInit (id) {\n        const factory = this.$options.idState\n        if (typeof factory === 'function') {\n          const data = factory.call(this, this)\n          store[id] = data\n          this.$_id = id\n          return data\n        } else {\n          throw new Error('[mixin IdState] Missing `idState` function on component definition.')\n        }\n      },\n\n      /**\n       * Ensure idState is created and up-to-date\n       */\n      $_updateIdState () {\n        const id = this.$_getId()\n        if (id == null) {\n          console.warn(`No id found for IdState with idProp: '${idProp}'.`)\n        }\n        if (id !== this.$_id) {\n          if (!store[id]) {\n            this.$_idStateInit(id)\n          }\n          this.idState = store[id]\n        }\n      },\n    },\n  }\n}\n"],"names":["itemsLimit","isIE","initCompat","init","ua","window","navigator","userAgent","msie","indexOf","parseInt","substring","rv","edge","getInternetExplorerVersion","script","name","props","emitOnMount","type","Boolean","default","ignoreWidth","ignoreHeight","emits","[object Object]","nextTick","this","_w","$el","offsetWidth","_h","offsetHeight","emitSize","object","document","createElement","_resizeObject","setAttribute","onload","addResizeHandlers","appendChild","data","removeResizeHandlers","methods","$emit","width","height","contentDocument","defaultView","addEventListener","compareAndNotify","removeEventListener","removeChild","_withId","withScopeId","_hoisted_1","class","tabindex","render","_ctx","_cache","$props","$setup","$data","$options","openBlock","createBlock","_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_toConsumableArray","arr","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","iter","from","_iterableToArray","o","minLen","n","toString","call","slice","test","_unsupportedIterableToArray","TypeError","_nonIterableSpread","len","arr2","__scopeId","__file","VisibilityState","el","options","vnode","instance","Constructor","_classCallCheck","observer","frozen","createObserver","protoProps","staticProps","value","_this","destroyObserver","callback","result","entry","once","throttle","_leading","throttleOptions","leading","delay","timeout","lastState","currentArgs","arguments","undefined","throttled","state","_len","args","_key","apply","concat","clearTimeout","setTimeout","_clear","oldResult","IntersectionObserver","entries","intersectingEntry","find","e","isIntersecting","intersectionRatio","threshold","intersection","observe","disconnect","get","beforeMount","_ref2","console","warn","_vue_visibilityState","unmounted","ObserveVisibility","updated","_ref3","deepEqual","val1","val2","oldValue","root","factory","regex","parents","node","ps","parentNode","style","prop","getComputedStyle","getPropertyValue","scroll","overflow","HTMLElement","SVGElement","scrollingElement","documentElement","module","exports","Scrollparent","items","required","keyField","String","direction","validator","includes","simpleArray","supportsPassive","opts","uid","components","ResizeObserver","directives","itemSize","Number","minItemSize","sizeField","typeField","buffer","pageMode","prerender","emitUpdate","pool","totalSize","ready","hoverKey","computed","sizes","-1","accumulator","field","current","computedMinSize","l","size","$_computedMinItemSize","watch","updateVisibleItems","applyPageMode","deep","$_startIndex","$_endIndex","$_views","Map","$_unusedViews","$_scrollDirty","$_lastUpdateScrollPosition","$_prerender","$nextTick","removeListeners","index","item","view","shallowReactive","position","nr","id","used","push","fake","unusedViews","unusedPool","set","delete","event","requestAnimationFrame","continuous","$_refreshTimout","handleScroll","isVisible","boundingClientRect","checkItem","checkPositionDiff","count","views","startIndex","endIndex","getScroll","positionDiff","start","end","h","oldI","a","b","Math","ceil","config","itemsLimitError","$_continuous","clear","unuseView","findIndex","unusedIndex","v","Error","pop","addView","$_sortTimer","sortViews","ScrollParent","body","isVertical","scrollState","bounds","getBoundingClientRect","boundsSize","top","left","innerHeight","innerWidth","scrollTop","clientHeight","scrollLeft","clientWidth","addListeners","listenerTarget","getListenerTarget","passive","handleResize","scrollToPosition","log","sort","viewA","viewB","_createBlock","_renderSlot","_createVNode","ref","onMouseenter","onMouseleave","active","_hoisted_2","onNotify","RecycleScroller","inheritAttrs","$_resizeObserver","CustomEvent","detail","contentRect","dispatchEvent","vscrollData","vscrollParent","vscrollResizeObserver","validSizes","$_undefinedMap","forceUpdate","immediate","$_updates","$_undefinedSizes","$refs","scroller","force","scrollToItem","$_scrollingToBottom","scrollHeight","cb","_mergeProps","min-item-size","key-field","onResize","onVisible","itemWithSize","before","after","inject","watchData","sizeDependencies","emitResize","tag","onDataUpdate","observeSize","unobserveSize","$_pendingVScrollUpdate","updateSize","$isServer","$_forceNextVScrollUpdate","updateWatchData","k","$watch","$on","onVscrollUpdate","onVscrollUpdateSize","$off","finalActive","$_pendingSizeUpdate","computeSize","$_watchData","applySize","round","unobserve","$slots","plugin","version","VERSION","install","Vue","finalOptions","assign","installComponents","componentsPrefix","prefix","component","DynamicScroller","DynamicScrollerItem","registerComponents","GlobalVue","global","use","idProp","vm","store","reactive","idState","created","$_id","$_getId","handler","_this2","$_updateIdState","beforeUpdate","$_idStateInit"],"mappings":"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"}