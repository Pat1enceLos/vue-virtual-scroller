{"version":3,"file":"vue-virtual-scroller.min.js","sources":["../src/config.js","../node_modules/vue-resize/dist/vue-resize.esm.js","../node_modules/scrollparent/scrollparent.js","../src/components/common.js","../src/utils.js","../src/components/RecycleScroller.vue","../src/components/RecycleScroller.vue?vue&type=template&id=093a936d&lang.js","../src/components/DynamicScroller.vue","../src/components/DynamicScroller.vue?vue&type=template&id=76e15f19&lang.js","../src/components/DynamicScrollerItem.vue","../src/index.js","../src/mixins/IdState.js"],"sourcesContent":["export default {\n  itemsLimit: 1000,\n}\n","import { nextTick, pushScopeId, popScopeId, openBlock, createBlock, withScopeId } from 'vue';\n\nfunction getInternetExplorerVersion() {\n  var ua = window.navigator.userAgent;\n  var msie = ua.indexOf('MSIE ');\n\n  if (msie > 0) {\n    // IE 10 or older => return version number\n    return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n  }\n\n  var trident = ua.indexOf('Trident/');\n\n  if (trident > 0) {\n    // IE 11 => return version number\n    var rv = ua.indexOf('rv:');\n    return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n  }\n\n  var edge = ua.indexOf('Edge/');\n\n  if (edge > 0) {\n    // Edge (IE 12+) => return version number\n    return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n  } // other browser\n\n\n  return -1;\n}\n\nlet isIE;\n\nfunction initCompat () {\n  if (!initCompat.init) {\n    initCompat.init = true;\n    isIE = getInternetExplorerVersion() !== -1;\n  }\n}\n\nvar script = {\n  name: 'ResizeObserver',\n\n  props: {\n    emitOnMount: {\n      type: Boolean,\n      default: false,\n    },\n\n    ignoreWidth: {\n      type: Boolean,\n      default: false,\n    },\n\n    ignoreHeight: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  emits: [\n    'notify',\n  ],\n\n  mounted () {\n    initCompat();\n    nextTick(() => {\n      this._w = this.$el.offsetWidth;\n      this._h = this.$el.offsetHeight;\n      if (this.emitOnMount) {\n        this.emitSize();\n      }\n    });\n    const object = document.createElement('object');\n    this._resizeObject = object;\n    object.setAttribute('aria-hidden', 'true');\n    object.setAttribute('tabindex', -1);\n    object.onload = this.addResizeHandlers;\n    object.type = 'text/html';\n    if (isIE) {\n      this.$el.appendChild(object);\n    }\n    object.data = 'about:blank';\n    if (!isIE) {\n      this.$el.appendChild(object);\n    }\n  },\n\n  beforeUnmount () {\n    this.removeResizeHandlers();\n  },\n\n  methods: {\n    compareAndNotify () {\n      if ((!this.ignoreWidth && this._w !== this.$el.offsetWidth) || (!this.ignoreHeight && this._h !== this.$el.offsetHeight)) {\n        this._w = this.$el.offsetWidth;\n        this._h = this.$el.offsetHeight;\n        this.emitSize();\n      }\n    },\n\n    emitSize () {\n      this.$emit('notify', {\n        width: this._w,\n        height: this._h,\n      });\n    },\n\n    addResizeHandlers () {\n      this._resizeObject.contentDocument.defaultView.addEventListener('resize', this.compareAndNotify);\n      this.compareAndNotify();\n    },\n\n    removeResizeHandlers () {\n      if (this._resizeObject && this._resizeObject.onload) {\n        if (!isIE && this._resizeObject.contentDocument) {\n          this._resizeObject.contentDocument.defaultView.removeEventListener('resize', this.compareAndNotify);\n        }\n        this.$el.removeChild(this._resizeObject);\n        this._resizeObject.onload = null;\n        this._resizeObject = null;\n      }\n    },\n  },\n};\n\nconst _withId = /*#__PURE__*/withScopeId(\"data-v-b329ee4c\");\n\npushScopeId(\"data-v-b329ee4c\");\nconst _hoisted_1 = {\n  class: \"resize-observer\",\n  tabindex: \"-1\"\n};\npopScopeId();\n\nconst render = /*#__PURE__*/_withId((_ctx, _cache, $props, $setup, $data, $options) => {\n  return (openBlock(), createBlock(\"div\", _hoisted_1))\n});\n\nscript.render = render;\nscript.__scopeId = \"data-v-b329ee4c\";\nscript.__file = \"src/components/ResizeObserver.vue\";\n\nfunction install(app) {\n  // eslint-disable-next-line vue/component-definition-name-casing\n  app.component('resize-observer', script);\n  app.component('ResizeObserver', script);\n}\n\nvar plugin = {\n  // eslint-disable-next-line no-undef\n  version: \"2.0.0-alpha.1\",\n  install: install\n};\n\nexport default plugin;\nexport { script as ResizeObserver, install };\n//# sourceMappingURL=vue-resize.esm.js.map\n","(function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if (typeof module === \"object\" && module.exports) {\n    module.exports = factory();\n  } else {\n    root.Scrollparent = factory();\n  }\n}(this, function () {\n  var regex = /(auto|scroll)/;\n\n  var parents = function (node, ps) {\n    if (node.parentNode === null) { return ps; }\n\n    return parents(node.parentNode, ps.concat([node]));\n  };\n\n  var style = function (node, prop) {\n    return getComputedStyle(node, null).getPropertyValue(prop);\n  };\n\n  var overflow = function (node) {\n    return style(node, \"overflow\") + style(node, \"overflow-y\") + style(node, \"overflow-x\");\n  };\n\n  var scroll = function (node) {\n   return regex.test(overflow(node));\n  };\n\n  var scrollParent = function (node) {\n    if (!(node instanceof HTMLElement || node instanceof SVGElement)) {\n      return ;\n    }\n\n    var ps = parents(node.parentNode, []);\n\n    for (var i = 0; i < ps.length; i += 1) {\n      if (scroll(ps[i])) {\n        return ps[i];\n      }\n    }\n\n    return document.scrollingElement || document.documentElement;\n  };\n\n  return scrollParent;\n}));\n","export const props = {\n  items: {\n    type: Array,\n    required: true,\n  },\n\n  keyField: {\n    type: String,\n    default: 'id',\n  },\n\n  direction: {\n    type: String,\n    default: 'vertical',\n    validator: (value) => ['vertical', 'horizontal'].includes(value),\n  },\n}\n\nexport function simpleArray () {\n  return this.items.length && typeof this.items[0] !== 'object'\n}\n","export let supportsPassive = false\n\nif (typeof window !== 'undefined') {\n  supportsPassive = false\n  try {\n    var opts = Object.defineProperty({}, 'passive', {\n      get () {\n        supportsPassive = true\n      },\n    })\n    window.addEventListener('test', null, opts)\n  } catch (e) {}\n}\n","<template>\n  <div\n    v-observe-visibility=\"handleVisibilityChange\"\n    class=\"vue-recycle-scroller\"\n    :class=\"{\n      ready,\n      'page-mode': pageMode,\n      [`direction-${direction}`]: true,\n    }\"\n    @scroll.passive=\"handleScroll\"\n  >\n    <div\n      v-if=\"$slots.before\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"before\"\n      />\n    </div>\n\n    <div\n      ref=\"wrapper\"\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n      class=\"vue-recycle-scroller__item-wrapper\"\n    >\n      <div\n        v-for=\"view of pool\"\n        :key=\"view.nr.id\"\n        :style=\"ready ? { transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px)` } : null\"\n        class=\"vue-recycle-scroller__item-view\"\n        :class=\"{ hover: hoverKey === view.nr.key }\"\n        @mouseenter=\"hoverKey = view.nr.key\"\n        @mouseleave=\"hoverKey = null\"\n      >\n        <slot\n          :item=\"view.item\"\n          :index=\"view.nr.index\"\n          :active=\"view.nr.used\"\n        />\n      </div>\n    </div>\n\n    <div\n      v-if=\"$slots.after\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"after\"\n      />\n    </div>\n\n    <ResizeObserver @notify=\"handleResize\" />\n  </div>\n</template>\n\n<script>\nimport { shallowReactive } from 'vue'\nimport { ResizeObserver } from 'vue-resize'\nimport { ObserveVisibility } from 'vue-observe-visibility'\nimport ScrollParent from 'scrollparent'\nimport config from '../config'\nimport { props, simpleArray } from './common'\nimport { supportsPassive } from '../utils'\n\nlet uid = 0\n\nexport default {\n  name: 'RecycleScroller',\n\n  components: {\n    ResizeObserver,\n  },\n\n  directives: {\n    ObserveVisibility,\n  },\n\n  props: {\n    ...props,\n\n    itemSize: {\n      type: Number,\n      default: null,\n    },\n\n    minItemSize: {\n      type: [Number, String],\n      default: null,\n    },\n\n    sizeField: {\n      type: String,\n      default: 'size',\n    },\n\n    typeField: {\n      type: String,\n      default: 'type',\n    },\n\n    buffer: {\n      type: Number,\n      default: 200,\n    },\n\n    pageMode: {\n      type: Boolean,\n      default: false,\n    },\n\n    prerender: {\n      type: Number,\n      default: 0,\n    },\n\n    emitUpdate: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  data () {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null,\n    }\n  },\n\n  computed: {\n    sizes () {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': { accumulator: 0 },\n        }\n        const items = this.items\n        const field = this.sizeField\n        const minItemSize = this.minItemSize\n        let computedMinSize = 10000\n        let accumulator = 0\n        let current\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize\n          if (current < computedMinSize) {\n            computedMinSize = current\n          }\n          accumulator += current\n          sizes[i] = { accumulator, size: current }\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize\n        return sizes\n      }\n      return []\n    },\n\n    simpleArray,\n  },\n\n  watch: {\n    items () {\n      this.updateVisibleItems(true)\n    },\n\n    pageMode () {\n      this.applyPageMode()\n      this.updateVisibleItems(false)\n    },\n\n    sizes: {\n      handler () {\n        this.updateVisibleItems(false)\n      },\n      deep: true,\n    },\n  },\n\n  created () {\n    this.$_startIndex = 0\n    this.$_endIndex = 0\n    this.$_views = new Map()\n    this.$_unusedViews = new Map()\n    this.$_scrollDirty = false\n    this.$_lastUpdateScrollPosition = 0\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true\n      this.updateVisibleItems(false)\n    }\n  },\n\n  mounted () {\n    this.applyPageMode()\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false\n      this.updateVisibleItems(true)\n      this.ready = true\n    })\n  },\n\n  beforeUnmount () {\n    this.removeListeners()\n  },\n\n  methods: {\n    addView (pool, index, item, key, type) {\n      const view = shallowReactive({\n        item,\n        position: 0,\n        nr: {\n          id: uid++,\n          index,\n          used: true,\n          key,\n          type,\n        },\n      })\n      pool.push(view)\n      return view\n    },\n\n    unuseView (view, fake = false) {\n      const unusedViews = this.$_unusedViews\n      const type = view.nr.type\n      let unusedPool = unusedViews.get(type)\n      if (!unusedPool) {\n        unusedPool = []\n        unusedViews.set(type, unusedPool)\n      }\n      unusedPool.push(view)\n      if (!fake) {\n        view.nr.used = false\n        view.position = -9999\n        this.$_views.delete(view.nr.key)\n      }\n    },\n\n    handleResize () {\n      this.$emit('resize')\n      if (this.ready) this.updateVisibleItems(false)\n    },\n\n    handleScroll (event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true\n        requestAnimationFrame(() => {\n          this.$_scrollDirty = false\n          const { continuous } = this.updateVisibleItems(false, true)\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout)\n            this.$_refreshTimout = setTimeout(this.handleScroll, 100)\n          }\n        })\n      }\n    },\n\n    handleVisibilityChange (isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible')\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false)\n          })\n        } else {\n          this.$emit('hidden')\n        }\n      }\n    },\n\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize\n      const minItemSize = this.$_computedMinItemSize\n      const typeField = this.typeField\n      const keyField = this.simpleArray ? null : this.keyField\n      const items = this.items\n      const count = items.length\n      const sizes = this.sizes\n      const views = this.$_views\n      const unusedViews = this.$_unusedViews\n      const pool = this.pool\n      let startIndex, endIndex\n      let totalSize\n\n      if (!count) {\n        startIndex = endIndex = totalSize = 0\n      } else if (this.$_prerender) {\n        startIndex = 0\n        endIndex = this.prerender\n        totalSize = null\n      } else {\n        const scroll = this.getScroll()\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition\n          if (positionDiff < 0) positionDiff = -positionDiff\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n            return {\n              continuous: true,\n            }\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start\n\n        const buffer = this.buffer\n        scroll.start -= buffer\n        scroll.end += buffer\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h\n          let a = 0\n          let b = count - 1\n          let i = ~~(count / 2)\n          let oldI\n\n          // Searching for startIndex\n          do {\n            oldI = i\n            h = sizes[i].accumulator\n            if (h < scroll.start) {\n              a = i\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i\n            }\n            i = ~~((a + b) / 2)\n          } while (i !== oldI)\n          i < 0 && (i = 0)\n          startIndex = i\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1\n          } else {\n            endIndex++\n            // Bounds\n            endIndex > count && (endIndex = count)\n          }\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize)\n          endIndex = Math.ceil(scroll.end / itemSize)\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0)\n          endIndex > count && (endIndex = count)\n\n          totalSize = count * itemSize\n        }\n      }\n\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError()\n      }\n\n      this.totalSize = totalSize\n\n      let view\n\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n\n      if (this.$_continuous !== continuous) {\n        if (continuous) {\n          views.clear()\n          unusedViews.clear()\n          for (let i = 0, l = pool.length; i < l; i++) {\n            view = pool[i]\n            this.unuseView(view)\n          }\n        }\n        this.$_continuous = continuous\n      } else if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i]\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = items.findIndex(\n                item => keyField ? item[keyField] === view.item[keyField] : item === view.item,\n              )\n            }\n\n            // Check if index is still in visible range\n            if (\n              view.nr.index === -1 ||\n              view.nr.index < startIndex ||\n              view.nr.index >= endIndex\n            ) {\n              this.unuseView(view)\n            }\n          }\n        }\n      }\n\n      const unusedIndex = continuous ? null : new Map()\n\n      let item, type, unusedPool\n      let v\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i]\n        const key = keyField ? item[keyField] : item\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n        }\n        view = views.get(key)\n\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view)\n          continue\n        }\n\n        // No view assigned to item\n        if (!view) {\n          if (i === items.length - 1) this.$emit('scrolledtoend')\n          if (i === 0) this.$emit('scrolledtobegin')\n\n          type = item[typeField]\n          unusedPool = unusedViews.get(type)\n\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop()\n              view.item = item\n              view.nr.used = true\n              view.nr.index = i\n              view.nr.key = key\n              view.nr.type = type\n            } else {\n              view = this.addView(pool, i, item, key, type)\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0\n\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type)\n              this.unuseView(view, true)\n              unusedPool = unusedViews.get(type)\n            }\n\n            view = unusedPool[v]\n            view.item = item\n            view.nr.used = true\n            view.nr.index = i\n            view.nr.key = key\n            view.nr.type = type\n            unusedIndex.set(type, v + 1)\n            v++\n          }\n          views.set(key, view)\n        } else {\n          view.nr.used = true\n          view.item = item\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator\n        } else {\n          view.position = i * itemSize\n        }\n      }\n\n      this.$_startIndex = startIndex\n      this.$_endIndex = endIndex\n\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex)\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer)\n      this.$_sortTimer = setTimeout(this.sortViews, 300)\n\n      return {\n        continuous,\n      }\n    },\n\n    getListenerTarget () {\n      let target = ScrollParent(this.$el)\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window\n      }\n      return target\n    },\n\n    getScroll () {\n      const { $el: el, direction } = this\n      const isVertical = direction === 'vertical'\n      let scrollState\n\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect()\n        const boundsSize = isVertical ? bounds.height : bounds.width\n        let start = -(isVertical ? bounds.top : bounds.left)\n        let size = isVertical ? window.innerHeight : window.innerWidth\n        if (start < 0) {\n          size += start\n          start = 0\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start\n        }\n        scrollState = {\n          start,\n          end: start + size,\n        }\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight,\n        }\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth,\n        }\n      }\n\n      return scrollState\n    },\n\n    applyPageMode () {\n      if (this.pageMode) {\n        this.addListeners()\n      } else {\n        this.removeListeners()\n      }\n    },\n\n    addListeners () {\n      this.listenerTarget = this.getListenerTarget()\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive ? {\n        passive: true,\n      } : false)\n      this.listenerTarget.addEventListener('resize', this.handleResize)\n    },\n\n    removeListeners () {\n      if (!this.listenerTarget) {\n        return\n      }\n\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\n\n      this.listenerTarget = null\n    },\n\n    scrollToItem (index) {\n      let scroll\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n      } else {\n        scroll = index * this.itemSize\n      }\n      this.scrollToPosition(scroll)\n    },\n\n    scrollToPosition (position) {\n      if (this.direction === 'vertical') {\n        this.$el.scrollTop = position\n      } else {\n        this.$el.scrollLeft = position\n      }\n    },\n\n    itemsLimitError () {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n      })\n      throw new Error('Rendered items limit reached')\n    },\n\n    sortViews () {\n      this.pool.sort((viewA, viewB) => viewA.nr.index - viewB.nr.index)\n    },\n  },\n}\n</script>\n\n<style>\n.vue-recycle-scroller {\n  position: relative;\n}\n\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n  overflow-y: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n  overflow-x: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal {\n  display: flex;\n}\n\n.vue-recycle-scroller__slot {\n  flex: auto 0 0;\n}\n\n.vue-recycle-scroller__item-wrapper {\n  flex: 1;\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n}\n\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  will-change: transform;\n}\n\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n  width: 100%;\n}\n\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n  height: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n  width: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n  height: 100%;\n}\n</style>\n","<template>\n  <div\n    v-observe-visibility=\"handleVisibilityChange\"\n    class=\"vue-recycle-scroller\"\n    :class=\"{\n      ready,\n      'page-mode': pageMode,\n      [`direction-${direction}`]: true,\n    }\"\n    @scroll.passive=\"handleScroll\"\n  >\n    <div\n      v-if=\"$slots.before\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"before\"\n      />\n    </div>\n\n    <div\n      ref=\"wrapper\"\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n      class=\"vue-recycle-scroller__item-wrapper\"\n    >\n      <div\n        v-for=\"view of pool\"\n        :key=\"view.nr.id\"\n        :style=\"ready ? { transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px)` } : null\"\n        class=\"vue-recycle-scroller__item-view\"\n        :class=\"{ hover: hoverKey === view.nr.key }\"\n        @mouseenter=\"hoverKey = view.nr.key\"\n        @mouseleave=\"hoverKey = null\"\n      >\n        <slot\n          :item=\"view.item\"\n          :index=\"view.nr.index\"\n          :active=\"view.nr.used\"\n        />\n      </div>\n    </div>\n\n    <div\n      v-if=\"$slots.after\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"after\"\n      />\n    </div>\n\n    <ResizeObserver @notify=\"handleResize\" />\n  </div>\n</template>\n\n<script>\nimport { shallowReactive } from 'vue'\nimport { ResizeObserver } from 'vue-resize'\nimport { ObserveVisibility } from 'vue-observe-visibility'\nimport ScrollParent from 'scrollparent'\nimport config from '../config'\nimport { props, simpleArray } from './common'\nimport { supportsPassive } from '../utils'\n\nlet uid = 0\n\nexport default {\n  name: 'RecycleScroller',\n\n  components: {\n    ResizeObserver,\n  },\n\n  directives: {\n    ObserveVisibility,\n  },\n\n  props: {\n    ...props,\n\n    itemSize: {\n      type: Number,\n      default: null,\n    },\n\n    minItemSize: {\n      type: [Number, String],\n      default: null,\n    },\n\n    sizeField: {\n      type: String,\n      default: 'size',\n    },\n\n    typeField: {\n      type: String,\n      default: 'type',\n    },\n\n    buffer: {\n      type: Number,\n      default: 200,\n    },\n\n    pageMode: {\n      type: Boolean,\n      default: false,\n    },\n\n    prerender: {\n      type: Number,\n      default: 0,\n    },\n\n    emitUpdate: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  data () {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null,\n    }\n  },\n\n  computed: {\n    sizes () {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': { accumulator: 0 },\n        }\n        const items = this.items\n        const field = this.sizeField\n        const minItemSize = this.minItemSize\n        let computedMinSize = 10000\n        let accumulator = 0\n        let current\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize\n          if (current < computedMinSize) {\n            computedMinSize = current\n          }\n          accumulator += current\n          sizes[i] = { accumulator, size: current }\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize\n        return sizes\n      }\n      return []\n    },\n\n    simpleArray,\n  },\n\n  watch: {\n    items () {\n      this.updateVisibleItems(true)\n    },\n\n    pageMode () {\n      this.applyPageMode()\n      this.updateVisibleItems(false)\n    },\n\n    sizes: {\n      handler () {\n        this.updateVisibleItems(false)\n      },\n      deep: true,\n    },\n  },\n\n  created () {\n    this.$_startIndex = 0\n    this.$_endIndex = 0\n    this.$_views = new Map()\n    this.$_unusedViews = new Map()\n    this.$_scrollDirty = false\n    this.$_lastUpdateScrollPosition = 0\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true\n      this.updateVisibleItems(false)\n    }\n  },\n\n  mounted () {\n    this.applyPageMode()\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false\n      this.updateVisibleItems(true)\n      this.ready = true\n    })\n  },\n\n  beforeUnmount () {\n    this.removeListeners()\n  },\n\n  methods: {\n    addView (pool, index, item, key, type) {\n      const view = shallowReactive({\n        item,\n        position: 0,\n        nr: {\n          id: uid++,\n          index,\n          used: true,\n          key,\n          type,\n        },\n      })\n      pool.push(view)\n      return view\n    },\n\n    unuseView (view, fake = false) {\n      const unusedViews = this.$_unusedViews\n      const type = view.nr.type\n      let unusedPool = unusedViews.get(type)\n      if (!unusedPool) {\n        unusedPool = []\n        unusedViews.set(type, unusedPool)\n      }\n      unusedPool.push(view)\n      if (!fake) {\n        view.nr.used = false\n        view.position = -9999\n        this.$_views.delete(view.nr.key)\n      }\n    },\n\n    handleResize () {\n      this.$emit('resize')\n      if (this.ready) this.updateVisibleItems(false)\n    },\n\n    handleScroll (event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true\n        requestAnimationFrame(() => {\n          this.$_scrollDirty = false\n          const { continuous } = this.updateVisibleItems(false, true)\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout)\n            this.$_refreshTimout = setTimeout(this.handleScroll, 100)\n          }\n        })\n      }\n    },\n\n    handleVisibilityChange (isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible')\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false)\n          })\n        } else {\n          this.$emit('hidden')\n        }\n      }\n    },\n\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize\n      const minItemSize = this.$_computedMinItemSize\n      const typeField = this.typeField\n      const keyField = this.simpleArray ? null : this.keyField\n      const items = this.items\n      const count = items.length\n      const sizes = this.sizes\n      const views = this.$_views\n      const unusedViews = this.$_unusedViews\n      const pool = this.pool\n      let startIndex, endIndex\n      let totalSize\n\n      if (!count) {\n        startIndex = endIndex = totalSize = 0\n      } else if (this.$_prerender) {\n        startIndex = 0\n        endIndex = this.prerender\n        totalSize = null\n      } else {\n        const scroll = this.getScroll()\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition\n          if (positionDiff < 0) positionDiff = -positionDiff\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n            return {\n              continuous: true,\n            }\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start\n\n        const buffer = this.buffer\n        scroll.start -= buffer\n        scroll.end += buffer\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h\n          let a = 0\n          let b = count - 1\n          let i = ~~(count / 2)\n          let oldI\n\n          // Searching for startIndex\n          do {\n            oldI = i\n            h = sizes[i].accumulator\n            if (h < scroll.start) {\n              a = i\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i\n            }\n            i = ~~((a + b) / 2)\n          } while (i !== oldI)\n          i < 0 && (i = 0)\n          startIndex = i\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1\n          } else {\n            endIndex++\n            // Bounds\n            endIndex > count && (endIndex = count)\n          }\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize)\n          endIndex = Math.ceil(scroll.end / itemSize)\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0)\n          endIndex > count && (endIndex = count)\n\n          totalSize = count * itemSize\n        }\n      }\n\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError()\n      }\n\n      this.totalSize = totalSize\n\n      let view\n\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n\n      if (this.$_continuous !== continuous) {\n        if (continuous) {\n          views.clear()\n          unusedViews.clear()\n          for (let i = 0, l = pool.length; i < l; i++) {\n            view = pool[i]\n            this.unuseView(view)\n          }\n        }\n        this.$_continuous = continuous\n      } else if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i]\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = items.findIndex(\n                item => keyField ? item[keyField] === view.item[keyField] : item === view.item,\n              )\n            }\n\n            // Check if index is still in visible range\n            if (\n              view.nr.index === -1 ||\n              view.nr.index < startIndex ||\n              view.nr.index >= endIndex\n            ) {\n              this.unuseView(view)\n            }\n          }\n        }\n      }\n\n      const unusedIndex = continuous ? null : new Map()\n\n      let item, type, unusedPool\n      let v\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i]\n        const key = keyField ? item[keyField] : item\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n        }\n        view = views.get(key)\n\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view)\n          continue\n        }\n\n        // No view assigned to item\n        if (!view) {\n          if (i === items.length - 1) this.$emit('scrolledtoend')\n          if (i === 0) this.$emit('scrolledtobegin')\n\n          type = item[typeField]\n          unusedPool = unusedViews.get(type)\n\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop()\n              view.item = item\n              view.nr.used = true\n              view.nr.index = i\n              view.nr.key = key\n              view.nr.type = type\n            } else {\n              view = this.addView(pool, i, item, key, type)\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0\n\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type)\n              this.unuseView(view, true)\n              unusedPool = unusedViews.get(type)\n            }\n\n            view = unusedPool[v]\n            view.item = item\n            view.nr.used = true\n            view.nr.index = i\n            view.nr.key = key\n            view.nr.type = type\n            unusedIndex.set(type, v + 1)\n            v++\n          }\n          views.set(key, view)\n        } else {\n          view.nr.used = true\n          view.item = item\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator\n        } else {\n          view.position = i * itemSize\n        }\n      }\n\n      this.$_startIndex = startIndex\n      this.$_endIndex = endIndex\n\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex)\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer)\n      this.$_sortTimer = setTimeout(this.sortViews, 300)\n\n      return {\n        continuous,\n      }\n    },\n\n    getListenerTarget () {\n      let target = ScrollParent(this.$el)\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window\n      }\n      return target\n    },\n\n    getScroll () {\n      const { $el: el, direction } = this\n      const isVertical = direction === 'vertical'\n      let scrollState\n\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect()\n        const boundsSize = isVertical ? bounds.height : bounds.width\n        let start = -(isVertical ? bounds.top : bounds.left)\n        let size = isVertical ? window.innerHeight : window.innerWidth\n        if (start < 0) {\n          size += start\n          start = 0\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start\n        }\n        scrollState = {\n          start,\n          end: start + size,\n        }\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight,\n        }\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth,\n        }\n      }\n\n      return scrollState\n    },\n\n    applyPageMode () {\n      if (this.pageMode) {\n        this.addListeners()\n      } else {\n        this.removeListeners()\n      }\n    },\n\n    addListeners () {\n      this.listenerTarget = this.getListenerTarget()\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive ? {\n        passive: true,\n      } : false)\n      this.listenerTarget.addEventListener('resize', this.handleResize)\n    },\n\n    removeListeners () {\n      if (!this.listenerTarget) {\n        return\n      }\n\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\n\n      this.listenerTarget = null\n    },\n\n    scrollToItem (index) {\n      let scroll\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n      } else {\n        scroll = index * this.itemSize\n      }\n      this.scrollToPosition(scroll)\n    },\n\n    scrollToPosition (position) {\n      if (this.direction === 'vertical') {\n        this.$el.scrollTop = position\n      } else {\n        this.$el.scrollLeft = position\n      }\n    },\n\n    itemsLimitError () {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n      })\n      throw new Error('Rendered items limit reached')\n    },\n\n    sortViews () {\n      this.pool.sort((viewA, viewB) => viewA.nr.index - viewB.nr.index)\n    },\n  },\n}\n</script>\n\n<style>\n.vue-recycle-scroller {\n  position: relative;\n}\n\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n  overflow-y: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n  overflow-x: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal {\n  display: flex;\n}\n\n.vue-recycle-scroller__slot {\n  flex: auto 0 0;\n}\n\n.vue-recycle-scroller__item-wrapper {\n  flex: 1;\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n}\n\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  will-change: transform;\n}\n\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n  width: 100%;\n}\n\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n  height: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n  width: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n  height: 100%;\n}\n</style>\n","<template>\n  <RecycleScroller\n    ref=\"scroller\"\n    :items=\"itemsWithSize\"\n    :min-item-size=\"minItemSize\"\n    :direction=\"direction\"\n    key-field=\"id\"\n    v-bind=\"$attrs\"\n    @resize=\"onScrollerResize\"\n    @visible=\"onScrollerVisible\"\n    v-on=\"listeners\"\n  >\n    <template slot-scope=\"{ item: itemWithSize, index, active }\">\n      <slot\n        v-bind=\"{\n          item: itemWithSize.item,\n          index,\n          active,\n          itemWithSize\n        }\"\n      />\n    </template>\n    <template slot=\"before\">\n      <slot name=\"before\" />\n    </template>\n    <template slot=\"after\">\n      <slot name=\"after\" />\n    </template>\n  </RecycleScroller>\n</template>\n\n<script>\nimport RecycleScroller from './RecycleScroller.vue'\nimport { props, simpleArray } from './common'\n\nexport default {\n  name: 'DynamicScroller',\n\n  components: {\n    RecycleScroller,\n  },\n\n  inheritAttrs: false,\n\n  provide () {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        for (const entry of entries) {\n          if (entry.target) {\n            const event = new CustomEvent(\n              'resize',\n              {\n                detail: {\n                  contentRect: entry.contentRect,\n                },\n              },\n            )\n            entry.target.dispatchEvent(event)\n          }\n        }\n      })\n    }\n\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver,\n    }\n  },\n\n  props: {\n    ...props,\n\n    minItemSize: {\n      type: [Number, String],\n      required: true,\n    },\n  },\n\n  data () {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        validSizes: {},\n        keyField: this.keyField,\n        simpleArray: false,\n      },\n    }\n  },\n\n  computed: {\n    simpleArray,\n\n    itemsWithSize () {\n      const result = []\n      const { items, keyField, simpleArray } = this\n      const sizes = this.vscrollData.sizes\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const id = simpleArray ? i : item[keyField]\n        let size = sizes[id]\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0\n        }\n        result.push({\n          item,\n          id,\n          size,\n        })\n      }\n      return result\n    },\n\n    listeners () {\n      const listeners = {}\n      for (const key in this.$listeners) {\n        if (key !== 'resize' && key !== 'visible') {\n          listeners[key] = this.$listeners[key]\n        }\n      }\n      return listeners\n    },\n  },\n\n  watch: {\n    items () {\n      this.forceUpdate(false)\n    },\n\n    simpleArray: {\n      handler (value) {\n        this.vscrollData.simpleArray = value\n      },\n      immediate: true,\n    },\n\n    direction (value) {\n      this.forceUpdate(true)\n    },\n  },\n\n  created () {\n    this.$_updates = []\n    this.$_undefinedSizes = 0\n    this.$_undefinedMap = {}\n  },\n\n  activated () {\n    this.vscrollData.active = true\n  },\n\n  deactivated () {\n    this.vscrollData.active = false\n  },\n\n  methods: {\n    onScrollerResize () {\n      const scroller = this.$refs.scroller\n      if (scroller) {\n        this.forceUpdate()\n      }\n      this.$emit('resize')\n    },\n\n    onScrollerVisible () {\n      this.$emit('vscroll:update', { force: false })\n      this.$emit('visible')\n    },\n\n    forceUpdate (clear = true) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.validSizes = {}\n      }\n      this.$emit('vscroll:update', { force: true })\n    },\n\n    scrollToItem (index) {\n      const scroller = this.$refs.scroller\n      if (scroller) scroller.scrollToItem(index)\n    },\n\n    getItemSize (item, index = undefined) {\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\n      return this.vscrollData.sizes[id] || 0\n    },\n\n    scrollToBottom () {\n      if (this.$_scrollingToBottom) return\n      this.$_scrollingToBottom = true\n      const el = this.$el\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false\n            } else {\n              requestAnimationFrame(cb)\n            }\n          })\n        }\n        requestAnimationFrame(cb)\n      })\n    },\n  },\n}\n</script>\n","<template>\n  <RecycleScroller\n    ref=\"scroller\"\n    :items=\"itemsWithSize\"\n    :min-item-size=\"minItemSize\"\n    :direction=\"direction\"\n    key-field=\"id\"\n    v-bind=\"$attrs\"\n    @resize=\"onScrollerResize\"\n    @visible=\"onScrollerVisible\"\n    v-on=\"listeners\"\n  >\n    <template slot-scope=\"{ item: itemWithSize, index, active }\">\n      <slot\n        v-bind=\"{\n          item: itemWithSize.item,\n          index,\n          active,\n          itemWithSize\n        }\"\n      />\n    </template>\n    <template slot=\"before\">\n      <slot name=\"before\" />\n    </template>\n    <template slot=\"after\">\n      <slot name=\"after\" />\n    </template>\n  </RecycleScroller>\n</template>\n\n<script>\nimport RecycleScroller from './RecycleScroller.vue'\nimport { props, simpleArray } from './common'\n\nexport default {\n  name: 'DynamicScroller',\n\n  components: {\n    RecycleScroller,\n  },\n\n  inheritAttrs: false,\n\n  provide () {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        for (const entry of entries) {\n          if (entry.target) {\n            const event = new CustomEvent(\n              'resize',\n              {\n                detail: {\n                  contentRect: entry.contentRect,\n                },\n              },\n            )\n            entry.target.dispatchEvent(event)\n          }\n        }\n      })\n    }\n\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver,\n    }\n  },\n\n  props: {\n    ...props,\n\n    minItemSize: {\n      type: [Number, String],\n      required: true,\n    },\n  },\n\n  data () {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        validSizes: {},\n        keyField: this.keyField,\n        simpleArray: false,\n      },\n    }\n  },\n\n  computed: {\n    simpleArray,\n\n    itemsWithSize () {\n      const result = []\n      const { items, keyField, simpleArray } = this\n      const sizes = this.vscrollData.sizes\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const id = simpleArray ? i : item[keyField]\n        let size = sizes[id]\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0\n        }\n        result.push({\n          item,\n          id,\n          size,\n        })\n      }\n      return result\n    },\n\n    listeners () {\n      const listeners = {}\n      for (const key in this.$listeners) {\n        if (key !== 'resize' && key !== 'visible') {\n          listeners[key] = this.$listeners[key]\n        }\n      }\n      return listeners\n    },\n  },\n\n  watch: {\n    items () {\n      this.forceUpdate(false)\n    },\n\n    simpleArray: {\n      handler (value) {\n        this.vscrollData.simpleArray = value\n      },\n      immediate: true,\n    },\n\n    direction (value) {\n      this.forceUpdate(true)\n    },\n  },\n\n  created () {\n    this.$_updates = []\n    this.$_undefinedSizes = 0\n    this.$_undefinedMap = {}\n  },\n\n  activated () {\n    this.vscrollData.active = true\n  },\n\n  deactivated () {\n    this.vscrollData.active = false\n  },\n\n  methods: {\n    onScrollerResize () {\n      const scroller = this.$refs.scroller\n      if (scroller) {\n        this.forceUpdate()\n      }\n      this.$emit('resize')\n    },\n\n    onScrollerVisible () {\n      this.$emit('vscroll:update', { force: false })\n      this.$emit('visible')\n    },\n\n    forceUpdate (clear = true) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.validSizes = {}\n      }\n      this.$emit('vscroll:update', { force: true })\n    },\n\n    scrollToItem (index) {\n      const scroller = this.$refs.scroller\n      if (scroller) scroller.scrollToItem(index)\n    },\n\n    getItemSize (item, index = undefined) {\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\n      return this.vscrollData.sizes[id] || 0\n    },\n\n    scrollToBottom () {\n      if (this.$_scrollingToBottom) return\n      this.$_scrollingToBottom = true\n      const el = this.$el\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false\n            } else {\n              requestAnimationFrame(cb)\n            }\n          })\n        }\n        requestAnimationFrame(cb)\n      })\n    },\n  },\n}\n</script>\n","<script>\nexport default {\n  name: 'DynamicScrollerItem',\n\n  inject: [\n    'vscrollData',\n    'vscrollParent',\n    'vscrollResizeObserver',\n  ],\n\n  props: {\n    // eslint-disable-next-line vue/require-prop-types\n    item: {\n      required: true,\n    },\n\n    watchData: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Indicates if the view is actively used to display an item.\n     */\n    active: {\n      type: Boolean,\n      required: true,\n    },\n\n    index: {\n      type: Number,\n      default: undefined,\n    },\n\n    sizeDependencies: {\n      type: [Array, Object],\n      default: null,\n    },\n\n    emitResize: {\n      type: Boolean,\n      default: false,\n    },\n\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n\n  computed: {\n    id () {\n      return this.vscrollData.simpleArray ? this.index : this.item[this.vscrollData.keyField]\n    },\n\n    size () {\n      return (this.vscrollData.validSizes[this.id] && this.vscrollData.sizes[this.id]) || 0\n    },\n\n    finalActive () {\n      return this.active && this.vscrollData.active\n    },\n  },\n\n  watch: {\n    watchData: 'updateWatchData',\n\n    id () {\n      if (!this.size) {\n        this.onDataUpdate()\n      }\n    },\n\n    finalActive (value) {\n      if (!this.size) {\n        if (value) {\n          if (!this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes++\n            this.vscrollParent.$_undefinedMap[this.id] = true\n          }\n        } else {\n          if (this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes--\n            this.vscrollParent.$_undefinedMap[this.id] = false\n          }\n        }\n      }\n\n      if (this.vscrollResizeObserver) {\n        if (value) {\n          this.observeSize()\n        } else {\n          this.unobserveSize()\n        }\n      } else if (value && this.$_pendingVScrollUpdate === this.id) {\n        this.updateSize()\n      }\n    },\n  },\n\n  created () {\n    if (this.$isServer) return\n\n    this.$_forceNextVScrollUpdate = null\n    this.updateWatchData()\n\n    if (!this.vscrollResizeObserver) {\n      for (const k in this.sizeDependencies) {\n        this.$watch(() => this.sizeDependencies[k], this.onDataUpdate)\n      }\n\n      this.vscrollParent.$on('vscroll:update', this.onVscrollUpdate)\n      this.vscrollParent.$on('vscroll:update-size', this.onVscrollUpdateSize)\n    }\n  },\n\n  mounted () {\n    if (this.vscrollData.active) {\n      this.updateSize()\n      this.observeSize()\n    }\n  },\n\n  beforeUnmount () {\n    this.vscrollParent.$off('vscroll:update', this.onVscrollUpdate)\n    this.vscrollParent.$off('vscroll:update-size', this.onVscrollUpdateSize)\n    this.unobserveSize()\n  },\n\n  methods: {\n    updateSize () {\n      if (this.finalActive) {\n        if (this.$_pendingSizeUpdate !== this.id) {\n          this.$_pendingSizeUpdate = this.id\n          this.$_forceNextVScrollUpdate = null\n          this.$_pendingVScrollUpdate = null\n          this.computeSize(this.id)\n        }\n      } else {\n        this.$_forceNextVScrollUpdate = this.id\n      }\n    },\n\n    updateWatchData () {\n      if (this.watchData) {\n        this.$_watchData = this.$watch('data', () => {\n          this.onDataUpdate()\n        }, {\n          deep: true,\n        })\n      } else if (this.$_watchData) {\n        this.$_watchData()\n        this.$_watchData = null\n      }\n    },\n\n    onVscrollUpdate ({ force }) {\n      // If not active, sechedule a size update when it becomes active\n      if (!this.finalActive && force) {\n        this.$_pendingVScrollUpdate = this.id\n      }\n\n      if (this.$_forceNextVScrollUpdate === this.id || force || !this.size) {\n        this.updateSize()\n      }\n    },\n\n    onDataUpdate () {\n      this.updateSize()\n    },\n\n    computeSize (id) {\n      this.$nextTick(() => {\n        if (this.id === id) {\n          const width = this.$el.offsetWidth\n          const height = this.$el.offsetHeight\n          this.applySize(width, height)\n        }\n        this.$_pendingSizeUpdate = null\n      })\n    },\n\n    applySize (width, height) {\n      const size = Math.round(this.vscrollParent.direction === 'vertical' ? height : width)\n      if (size && this.size !== size) {\n        if (this.vscrollParent.$_undefinedMap[this.id]) {\n          this.vscrollParent.$_undefinedSizes--\n          this.vscrollParent.$_undefinedMap[this.id] = undefined\n        }\n        this.$set(this.vscrollData.sizes, this.id, size)\n        this.$set(this.vscrollData.validSizes, this.id, true)\n        if (this.emitResize) this.$emit('resize', this.id)\n      }\n    },\n\n    observeSize () {\n      if (!this.vscrollResizeObserver) return\n      this.vscrollResizeObserver.observe(this.$el.parentNode)\n      this.$el.parentNode.addEventListener('resize', this.onResize)\n    },\n\n    unobserveSize () {\n      if (!this.vscrollResizeObserver) return\n      this.vscrollResizeObserver.unobserve(this.$el.parentNode)\n      this.$el.parentNode.removeEventListener('resize', this.onResize)\n    },\n\n    onResize (event) {\n      const { width, height } = event.detail.contentRect\n      this.applySize(width, height)\n    },\n  },\n\n  render (h) {\n    return h(this.tag, this.$slots.default)\n  },\n}\n</script>\n","import config from './config'\n\nimport RecycleScroller from './components/RecycleScroller.vue'\nimport DynamicScroller from './components/DynamicScroller.vue'\nimport DynamicScrollerItem from './components/DynamicScrollerItem.vue'\n\nexport { default as IdState } from './mixins/IdState'\n\nexport {\n  RecycleScroller,\n  DynamicScroller,\n  DynamicScrollerItem,\n}\n\nfunction registerComponents (Vue, prefix) {\n  Vue.component(`${prefix}recycle-scroller`, RecycleScroller)\n  Vue.component(`${prefix}RecycleScroller`, RecycleScroller)\n  Vue.component(`${prefix}dynamic-scroller`, DynamicScroller)\n  Vue.component(`${prefix}DynamicScroller`, DynamicScroller)\n  Vue.component(`${prefix}dynamic-scroller-item`, DynamicScrollerItem)\n  Vue.component(`${prefix}DynamicScrollerItem`, DynamicScrollerItem)\n}\n\nconst plugin = {\n  // eslint-disable-next-line no-undef\n  version: VERSION,\n  install (Vue, options) {\n    const finalOptions = Object.assign({}, {\n      installComponents: true,\n      componentsPrefix: '',\n    }, options)\n\n    for (const key in finalOptions) {\n      if (typeof finalOptions[key] !== 'undefined') {\n        config[key] = finalOptions[key]\n      }\n    }\n\n    if (finalOptions.installComponents) {\n      registerComponents(Vue, finalOptions.componentsPrefix)\n    }\n  },\n}\n\nexport default plugin\n\n// Auto-install\nlet GlobalVue = null\nif (typeof window !== 'undefined') {\n  GlobalVue = window.Vue\n} else if (typeof global !== 'undefined') {\n  GlobalVue = global.Vue\n}\nif (GlobalVue) {\n  GlobalVue.use(plugin)\n}\n","import { reactive } from 'vue'\n\nexport default function ({\n  idProp = vm => vm.item.id,\n} = {}) {\n  const store = reactive({})\n\n  // @vue/component\n  return {\n    data () {\n      return {\n        idState: null,\n      }\n    },\n\n    created () {\n      this.$_id = null\n      if (typeof idProp === 'function') {\n        this.$_getId = () => idProp.call(this, this)\n      } else {\n        this.$_getId = () => this[idProp]\n      }\n      this.$watch(this.$_getId, {\n        handler (value) {\n          this.$nextTick(() => {\n            this.$_id = value\n          })\n        },\n        immediate: true,\n      })\n      this.$_updateIdState()\n    },\n\n    beforeUpdate () {\n      this.$_updateIdState()\n    },\n\n    methods: {\n      /**\n       * Initialize an idState\n       * @param {number|string} id Unique id for the data\n       */\n      $_idStateInit (id) {\n        const factory = this.$options.idState\n        if (typeof factory === 'function') {\n          const data = factory.call(this, this)\n          store[id] = data\n          this.$_id = id\n          return data\n        } else {\n          throw new Error('[mixin IdState] Missing `idState` function on component definition.')\n        }\n      },\n\n      /**\n       * Ensure idState is created and up-to-date\n       */\n      $_updateIdState () {\n        const id = this.$_getId()\n        if (id == null) {\n          console.warn(`No id found for IdState with idProp: '${idProp}'.`)\n        }\n        if (id !== this.$_id) {\n          if (!store[id]) {\n            this.$_idStateInit(id)\n          }\n          this.idState = store[id]\n        }\n      },\n    },\n  }\n}\n"],"names":["itemsLimit","isIE","initCompat","init","ua","window","navigator","userAgent","msie","indexOf","parseInt","substring","rv","edge","getInternetExplorerVersion","script","name","props","emitOnMount","type","Boolean","default","ignoreWidth","ignoreHeight","emits","[object Object]","nextTick","this","_w","$el","offsetWidth","_h","offsetHeight","emitSize","object","document","createElement","_resizeObject","setAttribute","onload","addResizeHandlers","appendChild","data","removeResizeHandlers","methods","$emit","width","height","contentDocument","defaultView","addEventListener","compareAndNotify","removeEventListener","removeChild","_withId","withScopeId","_hoisted_1","class","tabindex","render","_ctx","_cache","$props","$setup","$data","$options","openBlock","createBlock","__scopeId","__file","root","factory","regex","parents","node","ps","parentNode","concat","style","prop","getComputedStyle","getPropertyValue","scroll","test","overflow","HTMLElement","SVGElement","i","length","scrollingElement","documentElement","module","exports","Scrollparent","items","Array","required","keyField","String","direction","validator","value","includes","simpleArray","_typeof","supportsPassive","opts","Object","defineProperty","get","e","uid","components","ResizeObserver","directives","ObserveVisibility","itemSize","Number","minItemSize","sizeField","typeField","buffer","pageMode","prerender","emitUpdate","pool","totalSize","ready","hoverKey","computed","sizes","current","accumulator","field","computedMinSize","l","size","$_computedMinItemSize","watch","updateVisibleItems","applyPageMode","handler","deep","created","$_startIndex","$_endIndex","$_views","Map","$_unusedViews","$_scrollDirty","$_lastUpdateScrollPosition","$_prerender","mounted","$nextTick","_this","beforeUnmount","removeListeners","addView","index","item","key","view","shallowReactive","position","nr","id","used","push","unuseView","fake","unusedViews","unusedPool","set","delete","handleResize","handleScroll","event","requestAnimationFrame","_this2","continuous","clearTimeout","$_refreshTimout","setTimeout","handleVisibilityChange","isVisible","entry","boundingClientRect","_this3","checkItem","startIndex","endIndex","checkPositionDiff","count","views","getScroll","positionDiff","start","end","oldI","a","b","Math","ceil","config","itemsLimitError","$_continuous","clear","findIndex","v","unusedIndex","Error","pop","$_sortTimer","sortViews","getListenerTarget","target","ScrollParent","body","scrollState","el","isVertical","bounds","getBoundingClientRect","boundsSize","top","left","innerHeight","innerWidth","scrollTop","clientHeight","scrollLeft","clientWidth","addListeners","listenerTarget","passive","scrollToItem","scrollToPosition","console","log","_this4","sort","viewA","viewB","_createBlock","before","_renderSlot","_createVNode","ref","onMouseenter","onMouseleave","active","after","_hoisted_2","onNotify","RecycleScroller","inheritAttrs","provide","$_resizeObserver","entries","CustomEvent","detail","contentRect","dispatchEvent","vscrollData","vscrollParent","vscrollResizeObserver","validSizes","itemsWithSize","result","$_undefinedMap","listeners","$listeners","forceUpdate","immediate","$_updates","$_undefinedSizes","activated","deactivated","onScrollerResize","$refs","scroller","onScrollerVisible","force","getItemSize","undefined","scrollToBottom","$_scrollingToBottom","scrollHeight","cb","slot","_mergeProps","onResize","onVisible","_toHandlers","_hoisted_3","inject","watchData","sizeDependencies","emitResize","tag","finalActive","onDataUpdate","observeSize","unobserveSize","$_pendingVScrollUpdate","updateSize","$isServer","$_forceNextVScrollUpdate","updateWatchData","k","$watch","$on","onVscrollUpdate","onVscrollUpdateSize","$off","$_pendingSizeUpdate","computeSize","$_watchData","applySize","round","$set","observe","unobserve","h","$slots","plugin","version","VERSION","install","Vue","options","finalOptions","assign","installComponents","componentsPrefix","prefix","component","DynamicScroller","DynamicScrollerItem","registerComponents","GlobalVue","global","use","idProp","vm","store","reactive","idState","$_id","$_getId","call","$_updateIdState","beforeUpdate","$_idStateInit","warn"],"mappings":"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"}